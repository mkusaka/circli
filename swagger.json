{
  "components": {
    "parameters": {
      "Claims": {
        "description": "comma separated list of claims to delete. Valid values are \"audience\" and \"ttl\".",
        "in": "query",
        "name": "claims",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Context": {
        "in": "path",
        "name": "context",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "DecisionID": {
        "in": "path",
        "name": "decisionID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "OrgID": {
        "in": "path",
        "name": "orgID",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "OwnerID": {
        "in": "path",
        "name": "ownerID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "ProjectID": {
        "in": "path",
        "name": "projectID",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "context_id": {
        "description": "An opaque identifier of a context.",
        "example": "be8bb2e3-c3d6-4098-89f4-572ff976ba9a",
        "in": "path",
        "name": "context_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "group_id": {
        "description": "An opaque identifier of a group.",
        "example": "39f660db-f49b-417e-ad79-2769ba29faf7",
        "in": "path",
        "name": "group_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "description": "The number of results per page.",
        "in": "query",
        "name": "limit",
        "schema": {
          "type": "integer"
        }
      },
      "name": {
        "description": "The name of the requested Orb.",
        "example": "node",
        "in": "query",
        "name": "name",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "name_path": {
        "description": "The name of the requested Orb.",
        "example": "node",
        "in": "path",
        "name": "name_path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "namespace": {
        "description": "The namespace that the Orb belongs to.",
        "example": "circleci",
        "in": "query",
        "name": "ns",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "namespace_path": {
        "description": "The namespace that the Orb belongs to.",
        "example": "circleci",
        "in": "path",
        "name": "namespace_path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "next_page_token": {
        "description": "Specify what page of results to fetch.",
        "in": "query",
        "name": "next_page_token",
        "schema": {
          "type": "string"
        }
      },
      "orb_id": {
        "description": "An opaque identifier of an orb.",
        "example": "d8a1f419-e207-40f5-8b31-cbc6486b45d8",
        "in": "path",
        "name": "orb_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "org_id": {
        "description": "An opaque identifier of an organization.",
        "example": "b9291e0d-a11e-41fb-8517-c545388b5953",
        "in": "path",
        "name": "org_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "organization": {
        "description": "The `organization` segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).",
        "example": "CircleCI-Public",
        "in": "path",
        "name": "organization",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "project": {
        "description": "The `project` segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).",
        "example": "api-preview-docs",
        "in": "path",
        "name": "project",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "project_id": {
        "description": "An opaque identifier of a project.",
        "example": "39723015-b399-4601-9ff6-bd1bfbed8fa8",
        "in": "path",
        "name": "project_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "provider": {
        "description": "The `provider` segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use `circleci`.",
        "example": "gh",
        "in": "path",
        "name": "provider",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "restriction_id": {
        "description": "An opaque identifier of a context restriction.",
        "example": "1c23d2cb-07b1-4a28-8af3-e369732050ed",
        "in": "path",
        "name": "restriction_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "usage_export_job_id": {
        "description": "An opaque identifier of a usage export job.",
        "example": "e8235eed-f121-4ae3-9c72-2719d6572818",
        "in": "path",
        "name": "usage_export_job_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      },
      "user_id": {
        "description": "An opaque identifier of a user.",
        "example": "a68942a8-c217-4d92-96e5-3b47f9a2f0d9",
        "in": "path",
        "name": "user_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "version": {
        "description": "The specific version of an Orb.",
        "example": "3.1.2",
        "in": "query",
        "name": "version",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "400_invalid_context_id": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "context_id is invalid.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Context ID provided is invalid."
      },
      "400_invalid_orb_id": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "orb_id is invalid.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Orb ID provided is invalid."
      },
      "400_invalid_restriction_id": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "restriction_id is invalid.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Context restriction ID provided is invalid."
      },
      "400_unexpected_request_body": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Unexpected request body provided.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Unexpected request body provided."
      },
      "401_invalid_token": {
        "content": {
          "application/json": {
            "examples": {
              "invalid_token": {
                "summary": "Token is invalid.",
                "value": {
                  "message": "Invalid token provided."
                }
              },
              "old_token": {
                "summary": "Token was generated before 2023-06-23.",
                "value": {
                  "message": "New format tokens are needed to authenticate this API endpoint. Create a new API token for access."
                }
              },
              "query_auth": {
                "summary": "Authentication attempted via query parameters.",
                "value": {
                  "message": "Support for query parameter authentication has been deprecated to improve security. Please use a supported authentication method such as header-based, or basic authentication."
                }
              }
            },
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Credentials provided are invalid."
      },
      "403_permission_denied": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Permission denied.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "None or insufficient credentials provided."
      },
      "404_entity_not_found": {
        "content": {
          "application/json": {
            "examples": {
              "context_not_found": {
                "summary": "Context not found.",
                "value": {
                  "message": "Context not found."
                }
              },
              "group_not_found": {
                "summary": "Group not found.",
                "value": {
                  "message": "Group does not exist."
                }
              },
              "orb_not_found": {
                "summary": "Orb not found.",
                "value": {
                  "message": "Orb does not exist."
                }
              },
              "org_not_found": {
                "summary": "Organization not found.",
                "value": {
                  "message": "Organization does not exist."
                }
              },
              "project_not_found": {
                "summary": "Project not found.",
                "value": {
                  "message": "Project does not exist."
                }
              },
              "user_not_found": {
                "summary": "User not found.",
                "value": {
                  "message": "User does not exist."
                }
              }
            },
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Entity not found."
      },
      "404_project_not_found": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Project not found.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Insufficient credentials for a private project, OR the organization, project, or repository does not exist."
      },
      "405_cannot_create_standalone_project": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Create projects using the API is currently supported for classic Github OAuth and Bitbucket projects only.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Create projects using the API is currently supported for classic Github OAuth and Bitbucket projects only."
      },
      "409_group_conflict": {
        "content": {
          "application/json": {
            "examples": {
              "max_groups": {
                "summary": "Max number of groups reached",
                "value": {
                  "message": "Failed to create group, reached max number of groups for this organization."
                }
              },
              "name_already_taken": {
                "summary": "Group name already taken",
                "value": {
                  "message": "Failed to create group, group <group-name> already exists."
                }
              }
            },
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "A conflict has occurred while attempting to create the resource.\n"
      },
      "429_rate_limit_exceeded": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Rate limit exceeded.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "API rate limits exceeded."
      },
      "500_internal_server_error": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": false,
              "properties": {
                "message": {
                  "default": "Internal server error.",
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Internal server error."
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "OwnerID: must be a valid UUID.",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "The request is malformed (e.g, a given path parameter is invalid)\n"
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "Forbidden",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "The user is forbidden from making this request\n"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "internal server error",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "Something unexpected happened on the server."
      },
      "Unauthenticated": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "unauthenticated",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "The request is unauthenticated\n"
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "Unauthorized",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "The request is unauthorized\n"
      },
      "UnexpectedServerError": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "error": {
                  "example": "unexpected server error",
                  "type": "string"
                }
              },
              "required": ["error"],
              "type": "object"
            }
          }
        },
        "description": "Something unexpected happened on the server."
      }
    },
    "schemas": {
      "BundleDiff": {
        "properties": {
          "created": {
            "items": {
              "description": "policy names",
              "type": "string"
            },
            "type": "array"
          },
          "deleted": {
            "items": {
              "description": "policy names",
              "type": "string"
            },
            "type": "array"
          },
          "modified": {
            "items": {
              "description": "policy names",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BundlePayload": {
        "properties": {
          "policies": {
            "additionalProperties": {
              "description": "policy content",
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "ClaimResponse": {
        "properties": {
          "audience": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "audience_updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "org_id": {
            "format": "uuid",
            "type": "string"
          },
          "project_id": {
            "format": "uuid",
            "type": "string"
          },
          "ttl": {
            "$ref": "#/components/schemas/JSONDuration"
          },
          "ttl_updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["org_id"],
        "type": "object"
      },
      "Decision": {
        "properties": {
          "enabled_rules": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hard_failures": {
            "items": {
              "$ref": "#/components/schemas/Violation"
            },
            "type": "array"
          },
          "reason": {
            "type": "string"
          },
          "soft_failures": {
            "items": {
              "$ref": "#/components/schemas/Violation"
            },
            "type": "array"
          },
          "status": {
            "type": "string"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "DecisionLog": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "decision": {
            "$ref": "#/components/schemas/Decision"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "properties": {
              "build_number": {
                "type": "integer"
              },
              "project_id": {
                "format": "uuid",
                "type": "string"
              },
              "ssh_rerun": {
                "type": "boolean"
              },
              "vcs": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "origin_repository_url": {
                    "type": "string"
                  },
                  "release_tag": {
                    "type": "string"
                  },
                  "target_repository_url": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "policies": {
            "additionalProperties": {
              "maxLength": 128,
              "minLength": 128,
              "type": "string"
            },
            "description": "policy-name-to-hash-map",
            "example": {
              "policy_name1": "1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75",
              "policy_name2": "5267768822ee624d48fce15ec5ca79cbd602cb7f4c2157a516556991f22ef8c7b5ef7b18d1ff41c59370efb0858651d44a936c11b7b144c48fe04df3c6a3e8da"
            },
            "type": "object"
          },
          "time_taken_ms": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DecisionSettings": {
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "JSONDuration": {
        "pattern": "^([0-9]+(ms|s|m|h|d|w)){1,7}$",
        "type": "string"
      },
      "PatchClaimsRequest": {
        "properties": {
          "audience": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ttl": {
            "$ref": "#/components/schemas/JSONDuration"
          }
        },
        "type": "object"
      },
      "Policy": {
        "properties": {
          "content": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PolicyBundle": {
        "additionalProperties": {
          "items": {
            "$ref": "#/components/schemas/Policy"
          }
        },
        "type": "object"
      },
      "Violation": {
        "properties": {
          "reason": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          }
        },
        "required": ["rule", "reason"],
        "type": "object"
      },
      "context_project_restrictions_list": {
        "additionalProperties": false,
        "properties": {
          "items": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "context_id": {
                  "description": "UUID of the context",
                  "format": "uuid",
                  "type": "string"
                },
                "id": {
                  "description": "UUID of the restriction",
                  "format": "uuid",
                  "type": "string"
                },
                "name": {
                  "description": "Contains a human-readable reference for the restriction. For\n\"project\" restrictions this is the name of the project.\n\nMay be null.\n",
                  "type": "string"
                },
                "project_id": {
                  "deprecated": true,
                  "description": "Deprecated - For \"project\" restrictions read the project ID from\n\"restriction_value\" instead.\n\nUUID of the project used in a project restriction.\n",
                  "format": "uuid",
                  "type": "string"
                },
                "restriction_type": {
                  "description": "Type of the restriction",
                  "enum": ["project", "expression"],
                  "type": "string"
                },
                "restriction_value": {
                  "description": "Value used to evaluate the restriction",
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "next_page_token": {
            "description": "Token that can be used to retrieve next page of results",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "get_usage_export_job_status": {
        "additionalProperties": false,
        "properties": {
          "download_urls": {
            "description": "A list of pre signed urls that the client can use to download the results of a Usage Export.",
            "items": {
              "additionalProperties": false,
              "format": "uri",
              "type": "string"
            },
            "type": "array"
          },
          "error_reason": {
            "type": "string"
          },
          "state": {
            "enum": ["created", "processing", "failed", "completed"],
            "type": "string"
          },
          "usage_export_job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["usage_export_job_id", "state", "download_urls"],
        "type": "object"
      },
      "project_settings": {
        "additionalProperties": false,
        "properties": {
          "advanced": {
            "additionalProperties": false,
            "properties": {
              "autocancel_builds": {
                "description": "Except for the default branch, cancel running pipelines on a branch when a new pipeline starts on that branch.",
                "type": "boolean"
              },
              "build_fork_prs": {
                "description": "Run builds for pull requests from forks.",
                "type": "boolean"
              },
              "build_prs_only": {
                "description": "Once enabled, we will only build branches that have associated pull requests open.",
                "type": "boolean"
              },
              "disable_ssh": {
                "description": "When set to true, job re-runs with SSH debugging access will be disabled for the project.",
                "type": "boolean"
              },
              "forks_receive_secret_env_vars": {
                "description": "Run builds for forked pull requests with this project's configuration, environment variables, and secrets.",
                "type": "boolean"
              },
              "oss": {
                "description": "Free and Open Source. Enabling this grants additional credits, and lets others see your builds, both through the web UI and the API.",
                "type": "boolean"
              },
              "pr_only_branch_overrides": {
                "description": "This field is used in conjunction with the `build_prs_only`, it allows you to specify a list of branches that will always triger a build. The value passed will overwrite the existing value.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "set_github_status": {
                "description": "Report the status of every pushed commit to GitHub's status API. Updates reported per job.",
                "type": "boolean"
              },
              "setup_workflows": {
                "description": "Enabling allows you to conditionally trigger configurations outside of the primary `.circleci` parent directory.",
                "type": "boolean"
              },
              "write_settings_requires_admin": {
                "description": "Whether updating these settings requires a user to be an organization administrator. When disabled, updating settings can be done by any member.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "restriction_created": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "UUID of the project restriction",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Contains a human-readable reference for the restriction. For\n\"project\" restrictions this is the name of the project.\n\nMay be null.\n",
            "type": "string"
          },
          "project_id": {
            "description": "Deprecated - For \"project\" restrictions read the project ID from\n\"restriction_value\" instead.\n\nUUID of the project used in a project restriction.\n",
            "format": "uuid",
            "type": "string"
          },
          "restriction_type": {
            "description": "Type of the restriction",
            "enum": ["project", "expression"],
            "type": "string"
          },
          "restriction_value": {
            "description": "Value used to evaluate the restriction",
            "type": "string"
          }
        }
      },
      "restriction_deleted": {
        "additionalProperties": false,
        "properties": {
          "message": {
            "description": "Response message",
            "type": "string"
          }
        }
      },
      "usage_export_job": {
        "additionalProperties": false,
        "properties": {
          "download_urls": {
            "description": "A list of pre signed urls that the client can use to download the results of a Usage Export.",
            "items": {
              "additionalProperties": false,
              "format": "uri",
              "type": "string"
            },
            "type": "array"
          },
          "end": {
            "format": "date-time",
            "type": "string"
          },
          "start": {
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "enum": ["created", "processing", "failed", "completed"],
            "type": "string"
          },
          "usage_export_job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "usage_export_job_id",
          "state",
          "start",
          "end",
          "download_urls"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "api_key_header": {
        "description": "Project API tokens are not supported for API v2. Use a personal API token.",
        "in": "header",
        "name": "Circle-Token",
        "type": "apiKey"
      },
      "api_key_query": {
        "description": "DEPRECATED - we will remove this option in the future. Project API tokens are not supported for API v2. Use a personal API token.",
        "in": "query",
        "name": "circle-token",
        "type": "apiKey"
      },
      "basic_auth": {
        "description": "HTTP basic authentication. The username should be set as the circle-token value, and the password should be left blank. Note that project tokens are currently not supported on API v2.",
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "This describes the resources that make up the CircleCI API v2.",
    "license": {
      "name": "MIT"
    },
    "title": "CircleCI API",
    "version": "v2"
  },
  "openapi": "3.0.3",
  "paths": {
    "/context": {
      "get": {
        "description": "List all contexts for an owner.",
        "operationId": "listContexts",
        "parameters": [
          {
            "description": "The unique ID of the owner of the context. Specify either this or owner-slug.",
            "in": "query",
            "name": "owner-id",
            "required": false,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.",
            "in": "query",
            "name": "owner-slug",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.",
            "in": "query",
            "name": "owner-type",
            "required": false,
            "schema": {
              "enum": ["account", "organization"],
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "created_at": {
                            "description": "The date and time the context was created.",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID of the context.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The user defined name of the context.",
                            "type": "string"
                          }
                        },
                        "required": ["id", "name", "created_at"],
                        "title": "Context",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of contexts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "List contexts",
        "tags": ["Context"]
      },
      "post": {
        "description": "Creates a new context.",
        "operationId": "createContext",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "The user defined name of the context.",
                    "type": "string"
                  },
                  "owner": {
                    "oneOf": [
                      {
                        "properties": {
                          "id": {
                            "description": "The unique ID of the owner of the context. Specify either this or slug.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of the owner. Defaults to \"organization\". Accounts are only used as context owners in server.",
                            "enum": ["account", "organization"],
                            "example": "organization",
                            "type": "string"
                          }
                        },
                        "required": ["id"],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "slug": {
                            "description": "A string that represents an organization. Specify either this or id. Cannot be used for accounts.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of owner. Defaults to \"organization\". Accounts are only used as context owners in server and must be specified by an id instead of a slug.",
                            "enum": ["organization"],
                            "type": "string"
                          }
                        },
                        "required": ["slug"],
                        "type": "object"
                      }
                    ]
                  }
                },
                "required": ["name", "owner"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created_at": {
                      "description": "The date and time the context was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the context.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The user defined name of the context.",
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "created_at"],
                  "title": "Context",
                  "type": "object"
                }
              }
            },
            "description": "The new context"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Create a new context",
        "tags": ["Context"]
      }
    },
    "/context/{context-id}": {
      "delete": {
        "operationId": "deleteContext",
        "parameters": [
          {
            "description": "ID of the context (UUID)",
            "in": "path",
            "name": "context-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Delete a context",
        "tags": ["Context"]
      },
      "get": {
        "description": "Returns basic information about a context.",
        "operationId": "getContext",
        "parameters": [
          {
            "description": "ID of the context (UUID)",
            "in": "path",
            "name": "context-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created_at": {
                      "description": "The date and time the context was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the context.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The user defined name of the context.",
                      "type": "string"
                    }
                  },
                  "required": ["id", "name", "created_at"],
                  "title": "Context",
                  "type": "object"
                }
              }
            },
            "description": "The context"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a context",
        "tags": ["Context"]
      }
    },
    "/context/{context-id}/environment-variable": {
      "get": {
        "description": "List information about environment variables in a context, not including their values.",
        "operationId": "listEnvironmentVariablesFromContext",
        "parameters": [
          {
            "description": "ID of the context (UUID)",
            "in": "path",
            "name": "context-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "context_id": {
                            "description": "ID of the context (UUID)",
                            "format": "uuid",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The date and time the environment variable was created.",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "updated_at": {
                            "description": "The date and time the environment variable was updated",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "variable": {
                            "description": "The name of the environment variable",
                            "example": "POSTGRES_USER",
                            "type": "string"
                          }
                        },
                        "required": [
                          "variable",
                          "created_at",
                          "updated_at",
                          "context_id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of environment variables"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "List environment variables",
        "tags": ["Context"]
      }
    },
    "/context/{context-id}/environment-variable/{env-var-name}": {
      "delete": {
        "description": "Delete an environment variable from a context.",
        "operationId": "deleteEnvironmentVariableFromContext",
        "parameters": [
          {
            "description": "The name of the environment variable",
            "example": "POSTGRES_USER",
            "in": "path",
            "name": "env-var-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of the context (UUID)",
            "in": "path",
            "name": "context-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Remove an environment variable",
        "tags": ["Context"]
      },
      "put": {
        "description": "Create or update an environment variable within a context. Returns information about the environment variable, not including its value.",
        "operationId": "addEnvironmentVariableToContext",
        "parameters": [
          {
            "description": "ID of the context (UUID)",
            "in": "path",
            "name": "context-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The name of the environment variable",
            "example": "POSTGRES_USER",
            "in": "path",
            "name": "env-var-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "value": {
                    "description": "The value of the environment variable",
                    "example": "some-secret-value",
                    "type": "string"
                  }
                },
                "required": ["value"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "context_id": {
                          "description": "ID of the context (UUID)",
                          "format": "uuid",
                          "type": "string"
                        },
                        "created_at": {
                          "description": "The date and time the environment variable was created.",
                          "example": "2015-09-21T17:29:21.042Z",
                          "format": "date-time",
                          "type": "string"
                        },
                        "updated_at": {
                          "description": "The date and time the environment variable was updated",
                          "example": "2015-09-21T17:29:21.042Z",
                          "format": "date-time",
                          "type": "string"
                        },
                        "variable": {
                          "description": "The name of the environment variable",
                          "example": "POSTGRES_USER",
                          "type": "string"
                        }
                      },
                      "required": [
                        "variable",
                        "created_at",
                        "updated_at",
                        "context_id"
                      ],
                      "type": "object"
                    },
                    {
                      "description": "message response",
                      "properties": {
                        "message": {
                          "description": "A human-readable message",
                          "type": "string"
                        }
                      },
                      "required": ["message"],
                      "title": "MessageResponse",
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "The new environment variable"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Add or update an environment variable",
        "tags": ["Context"]
      }
    },
    "/context/{context_id}/restrictions": {
      "get": {
        "description": "[__EXPERIMENTAL__] Gets a list of project restrictions associated with a context.",
        "operationId": "getContextRestrictions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/context_project_restrictions_list"
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "$ref": "#/components/responses/400_invalid_context_id"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "404": {
            "$ref": "#/components/responses/404_entity_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Get context restrictions",
        "tags": ["Context"]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/context_id"
        }
      ],
      "post": {
        "description": "[__EXPERIMENTAL__] Creates project restriction on a context.",
        "operationId": "createContextRestriction",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                "restriction_type": "project",
                "restriction_value": "405d8375-3514-403b-8c43-83ae74cfe0e9"
              },
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "project_id": {
                    "deprecated": true,
                    "description": "Deprecated - Use \"restriction_type\" and \"restriction_value\"\ninstead.\n\nThe project ID to use for a project restriction. This is\nmutually exclusive with restriction_type and restriction_value\nand implies restriction_type is \"project\".\n",
                    "format": "uuid",
                    "type": "string"
                  },
                  "restriction_type": {
                    "type": "string"
                  },
                  "restriction_value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restriction_created"
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "invalid_access": {
                    "summary": "Project doesn't exist, or insufficient credentials",
                    "value": {
                      "message": "Project does not exist, or user does not have access to this project."
                    }
                  },
                  "invalid_restriction": {
                    "summary": "Invalid restriction",
                    "value": {
                      "message": "This restriction cannot be applied to this context."
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Bad request."
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "404": {
            "$ref": "#/components/responses/404_entity_not_found"
          },
          "409": {
            "content": {
              "application/json": {
                "examples": {
                  "restriction_conflict": {
                    "summary": "Restriction conflict",
                    "value": {
                      "message": "The restriction you're trying to add already exists."
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Request conflict."
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Create context restriction",
        "tags": ["Context"]
      }
    },
    "/context/{context_id}/restrictions/{restriction_id}": {
      "delete": {
        "description": "[__EXPERIMENTAL__] Deletes a project restriction on a context.",
        "operationId": "deleteContextRestriction",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "successful_delete": {
                    "summary": "Successful deletion of restriction",
                    "value": {
                      "message": "Context restriction deleted."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/restriction_deleted"
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "$ref": "#/components/responses/400_invalid_restriction_id"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "404": {
            "$ref": "#/components/responses/404_entity_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Delete context restriction",
        "tags": ["Context"]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/context_id"
        },
        {
          "$ref": "#/components/parameters/restriction_id"
        }
      ]
    },
    "/insights/pages/{project-slug}/summary": {
      "get": {
        "description": "Get summary metrics and trends for a project at workflow and branch level.\n             Workflow runs going back at most 90 days are included in the aggregation window.\n             Trends are only supported upto last 30 days.\n             Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.",
        "operationId": "getProjectWorkflowsPageData",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The time window used to calculate summary metrics. If not provided, defaults to last-90-days",
            "example": "last-90-days",
            "in": "query",
            "name": "reporting-window",
            "required": false,
            "schema": {
              "enum": [
                "last-7-days",
                "last-90-days",
                "last-24-hours",
                "last-30-days",
                "last-60-days"
              ],
              "type": "string"
            }
          },
          {
            "description": "The names of VCS branches to include in branch-level workflow metrics.",
            "example": "A single branch: ?branches=main or for multiple branches: ?branches=main&branches=feature&branches=dev",
            "in": "query",
            "name": "branches",
            "required": false,
            "schema": {
              "type": "object"
            }
          },
          {
            "description": "The names of workflows to include in workflow-level metrics.",
            "example": "A single workflow name: ?workflow-names=build-test-deploy or\n    for multiple workflow names: ?workflow-names=build&workflow-names=test-and-deploy.",
            "in": "query",
            "name": "workflow-names",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "all_branches": {
                      "description": "A list of all the branches for a given project.",
                      "items": {
                        "description": "The VCS branch of a workflow's trigger.",
                        "example": "main",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "all_workflows": {
                      "description": "A list of all the workflows for a given project.",
                      "items": {
                        "description": "The name of the workflow.",
                        "example": "build-and-test",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "org_id": {
                      "description": "The unique ID of the organization"
                    },
                    "project_data": {
                      "description": "Metrics and trends data aggregated for a given project.",
                      "properties": {
                        "metrics": {
                          "description": "Metrics aggregated across all workflows and branches for a project.",
                          "properties": {
                            "success_rate": {
                              "format": "float",
                              "type": "number"
                            },
                            "throughput": {
                              "description": "The average number of runs per day.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_credits_used": {
                              "description": "The total credits consumed over the current timeseries interval.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total_duration_secs": {
                              "description": "Total duration, in seconds.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total_runs": {
                              "description": "The total number of runs, including runs that are still on-hold or running.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "total_runs",
                            "total_duration_secs",
                            "total_credits_used",
                            "success_rate",
                            "throughput"
                          ],
                          "type": "object"
                        },
                        "trends": {
                          "description": "Metric trends aggregated across all workflows and branches for a project.",
                          "properties": {
                            "success_rate": {
                              "description": "The trend value for the success rate.",
                              "format": "float",
                              "type": "number"
                            },
                            "throughput": {
                              "description": "Trend value for the average number of runs per day.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_credits_used": {
                              "description": "The trend value for total credits consumed.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_duration_secs": {
                              "description": "Trend value for total duration.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_runs": {
                              "description": "The trend value for total number of runs.",
                              "format": "float",
                              "type": "number"
                            }
                          },
                          "required": [
                            "total_runs",
                            "total_duration_secs",
                            "total_credits_used",
                            "success_rate",
                            "throughput"
                          ],
                          "type": "object"
                        }
                      },
                      "required": ["metrics", "trends"],
                      "type": "object"
                    },
                    "project_id": {
                      "description": "The unique ID of the project"
                    },
                    "project_workflow_branch_data": {
                      "description": "A list of metrics and trends data for branches for a given project.",
                      "items": {
                        "properties": {
                          "branch": {
                            "description": "The VCS branch of a workflow's trigger.",
                            "example": "main",
                            "type": "string"
                          },
                          "metrics": {
                            "description": "Metrics aggregated across a workflow or branchfor a project.",
                            "properties": {
                              "p95_duration_secs": {
                                "description": "The 95th percentile duration among a group of workflow runs.",
                                "format": "float",
                                "type": "number"
                              },
                              "success_rate": {
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed over the current timeseries interval.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "p95_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          },
                          "trends": {
                            "description": "Trends aggregated across a workflow or branch for a project.",
                            "properties": {
                              "p95_duration_secs": {
                                "description": "The 95th percentile duration among a group of workflow runs.",
                                "format": "float",
                                "type": "number"
                              },
                              "success_rate": {
                                "description": "The trend value for the success rate.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The trend value for total credits consumed.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_runs": {
                                "description": "The trend value for total number of runs.",
                                "format": "float",
                                "type": "number"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "p95_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          },
                          "workflow_name": {
                            "description": "The name of the workflow.",
                            "example": "build-and-test",
                            "type": "string"
                          }
                        },
                        "required": [
                          "workflow_name",
                          "branch",
                          "metrics",
                          "trends"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "project_workflow_data": {
                      "description": "A list of metrics and trends data for workflows for a given project.",
                      "items": {
                        "properties": {
                          "metrics": {
                            "description": "Metrics aggregated across a workflow or branchfor a project.",
                            "properties": {
                              "p95_duration_secs": {
                                "description": "The 95th percentile duration among a group of workflow runs.",
                                "format": "float",
                                "type": "number"
                              },
                              "success_rate": {
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed over the current timeseries interval.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "p95_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          },
                          "trends": {
                            "description": "Trends aggregated across a workflow or branch for a project.",
                            "properties": {
                              "p95_duration_secs": {
                                "description": "The 95th percentile duration among a group of workflow runs.",
                                "format": "float",
                                "type": "number"
                              },
                              "success_rate": {
                                "description": "The trend value for the success rate.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The trend value for total credits consumed.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_runs": {
                                "description": "The trend value for total number of runs.",
                                "format": "float",
                                "type": "number"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "p95_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          },
                          "workflow_name": {
                            "description": "The name of the workflow.",
                            "example": "build-and-test",
                            "type": "string"
                          }
                        },
                        "required": ["workflow_name", "metrics", "trends"],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Aggregated summary metrics and trends by workflow and branches"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get summary metrics and trends for a project across it's workflows and branches",
        "tags": ["Insights"]
      }
    },
    "/insights/time-series/{project-slug}/workflows/{workflow-name}/jobs": {
      "get": {
        "description": "Get timeseries data for all jobs within a workflow. Hourly granularity data is only retained for 48 hours while daily granularity data is retained for 90 days.",
        "operationId": "getJobTimeseries",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the workflow.",
            "example": "build-and-test",
            "in": "path",
            "name": "workflow-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The granularity for which to query timeseries data.",
            "example": "hourly",
            "in": "query",
            "name": "granularity",
            "required": false,
            "schema": {
              "enum": ["daily", "hourly"],
              "type": "string"
            }
          },
          {
            "description": "Include only executions that started at or after this date. This must be specified if an end-date is provided.",
            "example": "2020-08-21T13:26:29Z",
            "in": "query",
            "name": "start-date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include only executions that started before this date. This date can be at most 90 days after the start-date.",
            "example": "2020-09-04T13:26:29Z",
            "in": "query",
            "name": "end-date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Project level timeseries metrics response",
                  "properties": {
                    "items": {
                      "description": "Aggregate metrics for a workflow at a time granularity",
                      "items": {
                        "properties": {
                          "max_ended_at": {
                            "description": "The end time of the last execution included in the metrics.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "metrics": {
                            "description": "Metrics relating to a workflow's runs.",
                            "properties": {
                              "duration_metrics": {
                                "description": "Metrics relating to the duration of runs for a workflow.",
                                "properties": {
                                  "max": {
                                    "description": "The max duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "median": {
                                    "description": "The median duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "min": {
                                    "description": "The minimum duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "p95": {
                                    "description": "The 95th percentile duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "total": {
                                    "description": "The total duration, in seconds, added across a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  }
                                },
                                "required": [
                                  "min",
                                  "median",
                                  "max",
                                  "p95",
                                  "total"
                                ],
                                "type": "object"
                              },
                              "failed_runs": {
                                "description": "The number of failed runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "median_credits_used": {
                                "description": "The median credits consumed over the current timeseries interval.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "successful_runs": {
                                "description": "The number of successful runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "throughput": {
                                "description": "The average number of runs per day.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed over the current timeseries interval.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_runs",
                              "failed_runs",
                              "successful_runs",
                              "throughput",
                              "median_credits_used",
                              "total_credits_used",
                              "duration_metrics"
                            ],
                            "type": "object"
                          },
                          "min_started_at": {
                            "description": "The start time for the earliest execution included in the metrics.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the workflow.",
                            "example": "build-and-test",
                            "type": "string"
                          },
                          "timestamp": {
                            "description": "The start of the interval for timeseries metrics.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "min_started_at",
                          "max_ended_at",
                          "timestamp",
                          "metrics"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["next_page_token", "items"],
                  "type": "object"
                }
              }
            },
            "description": "An array of timeseries data, one entry per job."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Job timeseries data",
        "tags": ["Insights"]
      }
    },
    "/insights/{org-slug}/summary": {
      "get": {
        "description": "Gets aggregated summary metrics with trends for the entire org.\n              Also gets aggregated metrics and trends for each project belonging to the org.",
        "operationId": "getOrgSummaryData",
        "parameters": [
          {
            "description": "Org slug in the form `vcs-slug/org-name`. The `/` characters may be URL-escaped.",
            "example": "gh/CircleCI-Public",
            "in": "path",
            "name": "org-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The time window used to calculate summary metrics. If not provided, defaults to last-90-days",
            "example": "last-90-days",
            "in": "query",
            "name": "reporting-window",
            "required": false,
            "schema": {
              "enum": [
                "last-7-days",
                "last-90-days",
                "last-24-hours",
                "last-30-days",
                "last-60-days"
              ],
              "type": "string"
            }
          },
          {
            "description": "List of project names.",
            "example": "For a single project: ?project-names=some-project or for multiple projects: ?project-names=some-project1&project-names=some-project2",
            "in": "query",
            "name": "project-names",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Summary metrics with trends for the entire org, and for each project.",
                  "properties": {
                    "all_projects": {
                      "description": "A list of all the project names in the organization.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-nullable": true
                    },
                    "org_data": {
                      "description": "Aggregated metrics for an org, with trends.",
                      "properties": {
                        "metrics": {
                          "description": "Metrics for a single org metrics.",
                          "properties": {
                            "success_rate": {
                              "format": "float",
                              "type": "number"
                            },
                            "throughput": {
                              "description": "The average number of runs per day.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_credits_used": {
                              "description": "The total credits consumed over the current timeseries interval.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total_duration_secs": {
                              "description": "Total duration, in seconds.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            },
                            "total_runs": {
                              "description": "The total number of runs, including runs that are still on-hold or running.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer"
                            }
                          },
                          "required": [
                            "total_runs",
                            "total_duration_secs",
                            "total_credits_used",
                            "success_rate",
                            "throughput"
                          ],
                          "type": "object"
                        },
                        "trends": {
                          "description": "Trends for a single org.",
                          "properties": {
                            "success_rate": {
                              "description": "The trend value for the success rate.",
                              "format": "float",
                              "type": "number"
                            },
                            "throughput": {
                              "description": "Trend value for the average number of runs per day.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_credits_used": {
                              "description": "The trend value for total credits consumed.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_duration_secs": {
                              "description": "Trend value for total duration.",
                              "format": "float",
                              "type": "number"
                            },
                            "total_runs": {
                              "description": "The trend value for total number of runs.",
                              "format": "float",
                              "type": "number"
                            }
                          },
                          "required": [
                            "total_runs",
                            "total_duration_secs",
                            "total_credits_used",
                            "success_rate",
                            "throughput"
                          ],
                          "type": "object"
                        }
                      },
                      "required": ["metrics", "trends"],
                      "type": "object"
                    },
                    "org_project_data": {
                      "description": "Metrics for a single project, across all branches",
                      "items": {
                        "properties": {
                          "metrics": {
                            "description": "Metrics for a single project, across all branches.",
                            "properties": {
                              "success_rate": {
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed over the current timeseries interval.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_duration_secs": {
                                "description": "Total duration, in seconds.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "total_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          },
                          "project_name": {
                            "description": "The name of the project.",
                            "example": "api-preview-docs",
                            "type": "string"
                          },
                          "trends": {
                            "description": "Trends for a single project, across all branches.",
                            "properties": {
                              "success_rate": {
                                "description": "The trend value for the success rate.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The trend value for total credits consumed.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_duration_secs": {
                                "description": "Trend value for total duration.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_runs": {
                                "description": "The trend value for total number of runs.",
                                "format": "float",
                                "type": "number"
                              }
                            },
                            "required": [
                              "total_credits_used",
                              "total_duration_secs",
                              "total_runs",
                              "success_rate"
                            ],
                            "type": "object"
                          }
                        },
                        "required": ["project_name", "metrics", "trends"],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": ["org_data", "org_project_data", "all_projects"],
                  "type": "object"
                }
              }
            },
            "description": "summary metrics with trends for an entire org and it's projects."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get summary metrics with trends for the entire org, and for each project.",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/branches": {
      "get": {
        "description": "Get a list of all branches for a specified project. The list will only contain branches currently available within Insights. The maximum number of branches returned by this endpoint is 5,000.",
        "operationId": "getAllInsightsBranches",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a workflow. If not passed we will scope the API call to the project.",
            "example": "build-and-test",
            "in": "query",
            "name": "workflow-name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Project branches response.",
                  "properties": {
                    "branches": {
                      "description": "A list of all the branches for a given project.",
                      "items": {
                        "description": "The VCS branch of a workflow's trigger.",
                        "example": "main",
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "org_id": {
                      "description": "The unique ID of the organization"
                    },
                    "project_id": {
                      "description": "The unique ID of the project"
                    }
                  },
                  "required": ["org_id", "project_id", "branches"],
                  "type": "object"
                }
              }
            },
            "description": "A list of branches for a project"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get all branches for a project",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/flaky-tests": {
      "get": {
        "description": "Get a list of flaky tests for a given project. Flaky tests are branch agnostic.\n             A flaky test is a test that passed and failed in the same commit.",
        "operationId": "getFlakyTests",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Flaky tests response",
                  "properties": {
                    "flaky-tests": {
                      "description": "A list of all instances of flakes. Note that a test is no longer considered flaky after 2 weeks have passed without a flake. Each flake resets this timer.",
                      "items": {
                        "properties": {
                          "classname": {
                            "description": "The class the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "file": {
                            "description": "The file the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "job-name": {
                            "description": "The name of the job.",
                            "type": "string"
                          },
                          "job-number": {
                            "allOf": [
                              {
                                "format": "int64",
                                "type": "integer"
                              },
                              {
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            ],
                            "description": "The number of the job."
                          },
                          "pipeline-number": {
                            "allOf": [
                              {
                                "format": "int64",
                                "type": "integer"
                              },
                              {
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            ],
                            "description": "The number of the pipeline."
                          },
                          "source": {
                            "description": "The source of the test.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "test-name": {
                            "description": "The name of the test.",
                            "type": "string"
                          },
                          "time-wasted": {
                            "allOf": [
                              {
                                "format": "int64",
                                "type": "integer"
                              },
                              {
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            ]
                          },
                          "times-flaked": {
                            "description": "The number of times the test flaked.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "workflow-created-at": {
                            "description": "The date and time when workflow was created.",
                            "type": "string"
                          },
                          "workflow-id": {
                            "description": "The ID of the workflow associated with the provided test counts"
                          },
                          "workflow-name": {
                            "description": "The name of the workflow.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "workflow-created-at",
                          "classname",
                          "job-number",
                          "times-flaked",
                          "source",
                          "pipeline-number",
                          "file",
                          "workflow-name",
                          "job-name",
                          "workflow-id",
                          "test-name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total-flaky-tests": {
                      "description": "A count of unique tests that have failed. If your project has N tests that have flaked multiple times each, this will be equal to N.",
                      "example": 5,
                      "format": "double",
                      "type": "number"
                    }
                  },
                  "required": ["flaky-tests", "total-flaky-tests"],
                  "type": "object"
                }
              }
            },
            "description": "A list of flaky tests for a project"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get flaky tests for a project",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/workflows": {
      "get": {
        "description": "Get summary metrics for a project's workflows.  Workflow runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours.  Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.",
        "operationId": "getProjectWorkflowMetrics",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.",
            "in": "query",
            "name": "all-branches",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The time window used to calculate summary metrics. If not provided, defaults to last-90-days",
            "example": "last-90-days",
            "in": "query",
            "name": "reporting-window",
            "required": false,
            "schema": {
              "enum": [
                "last-7-days",
                "last-90-days",
                "last-24-hours",
                "last-30-days",
                "last-60-days"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Paginated workflow summary metrics.",
                  "properties": {
                    "items": {
                      "description": "Workflow summary metrics.",
                      "items": {
                        "properties": {
                          "metrics": {
                            "description": "Metrics relating to a workflow's runs.",
                            "properties": {
                              "duration_metrics": {
                                "description": "Metrics relating to the duration of runs for a workflow.",
                                "properties": {
                                  "max": {
                                    "description": "The max duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "mean": {
                                    "description": "The mean duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "median": {
                                    "description": "The median duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "min": {
                                    "description": "The minimum duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "p95": {
                                    "description": "The 95th percentile duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "standard_deviation": {
                                    "description": "The standard deviation, in seconds, among a group of runs.",
                                    "format": "float",
                                    "type": "number",
                                    "x-nullable": true
                                  }
                                },
                                "required": [
                                  "min",
                                  "mean",
                                  "median",
                                  "p95",
                                  "max",
                                  "standard_deviation"
                                ],
                                "type": "object"
                              },
                              "failed_runs": {
                                "description": "The number of failed runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "mttr": {
                                "description": "The mean time to recovery (mean time between failures and their next success) in seconds.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer",
                                "x-nullable": true
                              },
                              "success_rate": {
                                "format": "float",
                                "type": "number"
                              },
                              "successful_runs": {
                                "description": "The number of successful runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "throughput": {
                                "description": "The average number of runs per day.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer",
                                "x-nullable": true
                              },
                              "total_recoveries": {
                                "description": "The number of recovered workflow executions per day.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer",
                                "x-nullable": true
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_runs",
                              "successful_runs",
                              "mttr",
                              "total_credits_used",
                              "failed_runs",
                              "success_rate",
                              "duration_metrics",
                              "total_recoveries",
                              "throughput"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "The name of the workflow.",
                            "example": "build-and-test",
                            "type": "string"
                          },
                          "project_id": {
                            "description": "The unique ID of the project"
                          },
                          "window_end": {
                            "description": "The timestamp of the last build within the requested reporting window.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "window_start": {
                            "description": "The timestamp of the first build within the requested reporting window.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "metrics",
                          "window_start",
                          "window_end",
                          "project_id"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of summary metrics by workflow"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get summary metrics for a project's workflows",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/workflows/{workflow-name}": {
      "get": {
        "description": "Get recent runs of a workflow. Runs going back at most 90 days are returned. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.",
        "operationId": "getProjectWorkflowRuns",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the workflow.",
            "example": "build-and-test",
            "in": "path",
            "name": "workflow-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.",
            "in": "query",
            "name": "all-branches",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include only executions that started at or after this date. This must be specified if an end-date is provided.",
            "example": "2020-08-21T13:26:29Z",
            "in": "query",
            "name": "start-date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include only executions that started before this date. This date can be at most 90 days after the start-date.",
            "example": "2020-09-04T13:26:29Z",
            "in": "query",
            "name": "end-date",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Paginated recent workflow runs.",
                  "properties": {
                    "items": {
                      "description": "Recent workflow runs.",
                      "items": {
                        "properties": {
                          "branch": {
                            "description": "The VCS branch of a Workflow's trigger.",
                            "example": "main",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The date and time the workflow was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "credits_used": {
                            "description": "The number of credits used during execution. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "duration": {
                            "description": "The duration in seconds of a run.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer",
                            "x-nullable": true
                          },
                          "id": {
                            "description": "The unique ID of the workflow.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "is_approval": {
                            "description": "Describes if the job is an approval job or not. Approval jobs are intermediary jobs that are created to pause the workflow until approved.",
                            "example": false,
                            "type": "boolean"
                          },
                          "status": {
                            "description": "Workflow status.",
                            "enum": [
                              "success",
                              "failed",
                              "error",
                              "canceled",
                              "unauthorized"
                            ],
                            "type": "string",
                            "x-nullable": true
                          },
                          "stopped_at": {
                            "description": "The date and time the workflow stopped.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": true
                          }
                        },
                        "required": [
                          "id",
                          "branch",
                          "duration",
                          "created_at",
                          "stopped_at",
                          "credits_used",
                          "status",
                          "is_approval"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of recent workflow runs"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get recent runs of a workflow",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/workflows/{workflow-name}/jobs": {
      "get": {
        "description": "Get summary metrics for a project workflow's jobs. Job runs going back at most 90 days are included in the aggregation window. Metrics are refreshed daily, and thus may not include executions from the last 24 hours. Please note that Insights is not a financial reporting tool and should not be used for precise credit reporting.  Credit reporting from Insights does not use the same source of truth as the billing information that is found in the Plan Overview page in the CircleCI UI, nor does the underlying data have the same data accuracy guarantees as the billing information in the CircleCI UI.  This may lead to discrepancies between credits reported from Insights and the billing information in the Plan Overview page of the CircleCI UI.  For precise credit reporting, always use the Plan Overview page in the CircleCI UI.",
        "operationId": "getProjectWorkflowJobMetrics",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the workflow.",
            "example": "build-and-test",
            "in": "path",
            "name": "workflow-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.",
            "in": "query",
            "name": "all-branches",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The time window used to calculate summary metrics. If not provided, defaults to last-90-days",
            "example": "last-90-days",
            "in": "query",
            "name": "reporting-window",
            "required": false,
            "schema": {
              "enum": [
                "last-7-days",
                "last-90-days",
                "last-24-hours",
                "last-30-days",
                "last-60-days"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Paginated workflow job summary metrics.",
                  "properties": {
                    "items": {
                      "description": "Job summary metrics.",
                      "items": {
                        "properties": {
                          "metrics": {
                            "description": "Metrics relating to a workflow job's runs.",
                            "properties": {
                              "duration_metrics": {
                                "description": "Metrics relating to the duration of runs for a workflow job.",
                                "properties": {
                                  "max": {
                                    "description": "The max duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "mean": {
                                    "description": "The mean duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "median": {
                                    "description": "The median duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "min": {
                                    "description": "The minimum duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "p95": {
                                    "description": "The 95th percentile duration, in seconds, among a group of runs.",
                                    "format": "int64",
                                    "minimum": 0,
                                    "type": "integer",
                                    "x-nullable": true
                                  },
                                  "standard_deviation": {
                                    "description": "The standard deviation, in seconds, among a group of runs.",
                                    "format": "float",
                                    "type": "number",
                                    "x-nullable": true
                                  }
                                },
                                "required": [
                                  "min",
                                  "mean",
                                  "median",
                                  "p95",
                                  "max",
                                  "standard_deviation"
                                ],
                                "type": "object"
                              },
                              "failed_runs": {
                                "description": "The number of failed runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "success_rate": {
                                "format": "float",
                                "type": "number"
                              },
                              "successful_runs": {
                                "description": "The number of successful runs.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "throughput": {
                                "description": "The average number of runs per day.",
                                "format": "float",
                                "type": "number"
                              },
                              "total_credits_used": {
                                "description": "The total credits consumed by the job in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total_runs": {
                                "description": "The total number of runs, including runs that are still on-hold or running.",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "total_runs",
                              "failed_runs",
                              "successful_runs",
                              "duration_metrics",
                              "success_rate",
                              "total_credits_used",
                              "throughput"
                            ],
                            "type": "object"
                          },
                          "name": {
                            "description": "The name of the job.",
                            "type": "string"
                          },
                          "window_end": {
                            "description": "The timestamp of the last build within the requested reporting window.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "window_start": {
                            "description": "The timestamp of the first build within the requested reporting window.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "metrics",
                          "window_start",
                          "window_end"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of summary metrics by workflow job."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get summary metrics for a project workflow's jobs.",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/workflows/{workflow-name}/summary": {
      "get": {
        "description": "Get the metrics and trends for a particular workflow on a single branch or all branches",
        "operationId": "getWorkflowSummary",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the workflow.",
            "example": "build-and-test",
            "in": "path",
            "name": "workflow-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.",
            "in": "query",
            "name": "all-branches",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Workflow level aggregated metrics and trends response",
                  "properties": {
                    "metrics": {
                      "description": "Metrics aggregated across a workflow for a given time window.",
                      "properties": {
                        "completed_runs": {
                          "description": "The number of runs that ran to completion within the aggregation window",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer",
                          "x-nullable": true
                        },
                        "duration_metrics": {
                          "description": "Metrics relating to the duration of runs for a workflow.",
                          "properties": {
                            "max": {
                              "description": "The max duration, in seconds, among a group of runs.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer",
                              "x-nullable": true
                            },
                            "mean": {
                              "description": "The mean duration, in seconds, among a group of runs.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer",
                              "x-nullable": true
                            },
                            "median": {
                              "description": "The median duration, in seconds, among a group of runs.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer",
                              "x-nullable": true
                            },
                            "min": {
                              "description": "The minimum duration, in seconds, among a group of runs.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer",
                              "x-nullable": true
                            },
                            "p95": {
                              "description": "The 95th percentile duration, in seconds, among a group of runs.",
                              "format": "int64",
                              "minimum": 0,
                              "type": "integer",
                              "x-nullable": true
                            },
                            "standard_deviation": {
                              "description": "The standard deviation, in seconds, among a group of runs.",
                              "format": "float",
                              "type": "number",
                              "x-nullable": true
                            }
                          },
                          "required": [
                            "min",
                            "mean",
                            "median",
                            "p95",
                            "max",
                            "standard_deviation"
                          ],
                          "type": "object"
                        },
                        "failed_runs": {
                          "description": "The number of failed runs.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "mttr": {
                          "description": "The mean time to recovery (mean time between failures and their next success) in seconds.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer",
                          "x-nullable": true
                        },
                        "success_rate": {
                          "format": "float",
                          "type": "number"
                        },
                        "successful_runs": {
                          "description": "The number of successful runs.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "throughput": {
                          "description": "The average number of runs per day.",
                          "format": "float",
                          "type": "number"
                        },
                        "total_credits_used": {
                          "description": "The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer",
                          "x-nullable": true
                        },
                        "total_runs": {
                          "description": "The total number of runs, including runs that are still on-hold or running.",
                          "format": "int64",
                          "minimum": 0,
                          "type": "integer"
                        },
                        "window_end": {
                          "description": "The timestamp of the last build within the requested reporting window.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "window_start": {
                          "description": "The timestamp of the first build within the requested reporting window.",
                          "format": "date-time",
                          "type": "string"
                        }
                      },
                      "required": [
                        "total_runs",
                        "successful_runs",
                        "mttr",
                        "total_credits_used",
                        "failed_runs",
                        "success_rate",
                        "window_start",
                        "duration_metrics",
                        "window_end",
                        "throughput",
                        "completed_runs"
                      ],
                      "type": "object"
                    },
                    "trends": {
                      "description": "Trends for aggregated metrics across a workflow for a given time window.",
                      "properties": {
                        "failed_runs": {
                          "description": "The trend value for number of failed runs.",
                          "format": "float",
                          "type": "number"
                        },
                        "median_duration_secs": {
                          "description": "Trend value for the 50th percentile duration for a workflow for a given time window.",
                          "format": "float",
                          "type": "number"
                        },
                        "mttr": {
                          "description": "trend for mean time to recovery (mean time between failures and their next success).",
                          "format": "float",
                          "type": "number"
                        },
                        "p95_duration_secs": {
                          "description": "Trend value for the 95th percentile duration for a workflow for a given time window.",
                          "format": "float",
                          "type": "number"
                        },
                        "success_rate": {
                          "description": "The trend value for the success rate.",
                          "format": "float",
                          "type": "number"
                        },
                        "throughput": {
                          "description": "Trend value for the average number of runs per day.",
                          "format": "float",
                          "type": "number"
                        },
                        "total_credits_used": {
                          "description": "The trend value for total credits consumed.",
                          "format": "float",
                          "type": "number"
                        },
                        "total_runs": {
                          "description": "The trend value for total number of runs.",
                          "format": "float",
                          "type": "number"
                        }
                      },
                      "required": [
                        "total_runs",
                        "failed_runs",
                        "success_rate",
                        "p95_duration_secs",
                        "median_duration_secs",
                        "total_credits_used",
                        "mttr",
                        "throughput"
                      ],
                      "type": "object"
                    },
                    "workflow_names": {
                      "description": "A list of all the workflow names for a given project.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": ["metrics", "trends", "workflow_names"],
                  "type": "object"
                }
              }
            },
            "description": "Metrics and trends for a workflow"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get metrics and trends for workflows",
        "tags": ["Insights"]
      }
    },
    "/insights/{project-slug}/workflows/{workflow-name}/test-metrics": {
      "get": {
        "description": "Get test metrics for a project's workflows. Currently tests metrics are calculated based on 10 most recent workflow runs.",
        "operationId": "getProjectWorkflowTestMetrics",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the workflow.",
            "example": "build-and-test",
            "in": "path",
            "name": "workflow-name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a vcs branch. If not passed we will scope the API call to the default branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.",
            "in": "query",
            "name": "all-branches",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Project level test metrics response",
                  "properties": {
                    "average_test_count": {
                      "description": "The average number of tests executed per run",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "most_failed_tests": {
                      "description": "Metrics for the most frequently failing tests",
                      "items": {
                        "properties": {
                          "classname": {
                            "description": "The class the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "failed_runs": {
                            "description": "The number of times the test failed",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "file": {
                            "description": "The file the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "flaky": {
                            "description": "Whether the test is flaky.",
                            "type": "boolean"
                          },
                          "job_name": {
                            "description": "The name of the job.",
                            "type": "string"
                          },
                          "p95_duration": {
                            "description": "The 95th percentile duration, in seconds, among a group of test runs.",
                            "format": "double",
                            "type": "number",
                            "x-nullable": true
                          },
                          "source": {
                            "description": "The source of the test.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "test_name": {
                            "description": "The name of the test.",
                            "type": "string"
                          },
                          "total_runs": {
                            "description": "The total number of times the test was run.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "failed_runs",
                          "job_name",
                          "p95_duration",
                          "test_name",
                          "file",
                          "source",
                          "classname",
                          "total_runs",
                          "flaky"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "most_failed_tests_extra": {
                      "description": "The number of tests with the same success rate being omitted from most_failed_tests",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "slowest_tests": {
                      "description": "Metrics for the slowest running tests",
                      "items": {
                        "properties": {
                          "classname": {
                            "description": "The class the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "failed_runs": {
                            "description": "The number of times the test failed",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "file": {
                            "description": "The file the test belongs to.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "flaky": {
                            "description": "Whether the test is flaky.",
                            "type": "boolean"
                          },
                          "job_name": {
                            "description": "The name of the job.",
                            "type": "string"
                          },
                          "p95_duration": {
                            "description": "The 95th percentile duration, in seconds, among a group of test runs.",
                            "format": "double",
                            "type": "number",
                            "x-nullable": true
                          },
                          "source": {
                            "description": "The source of the test.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "test_name": {
                            "description": "The name of the test.",
                            "type": "string"
                          },
                          "total_runs": {
                            "description": "The total number of times the test was run.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [
                          "failed_runs",
                          "job_name",
                          "p95_duration",
                          "test_name",
                          "file",
                          "source",
                          "classname",
                          "total_runs",
                          "flaky"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "slowest_tests_extra": {
                      "description": "The number of tests with the same duration rate being omitted from slowest_tests",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "test_runs": {
                      "description": "Test counts grouped by pipeline number and workflow id",
                      "items": {
                        "properties": {
                          "pipeline_number": {
                            "description": "The number of the pipeline associated with the provided test counts",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "success_rate": {
                            "description": "The success rate calculated from test counts",
                            "format": "float",
                            "type": "number"
                          },
                          "test_counts": {
                            "description": "Test counts for a given pipeline number",
                            "properties": {
                              "error": {
                                "description": "The number of tests with the error status",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "failure": {
                                "description": "The number of tests with the failure status",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "skipped": {
                                "description": "The number of tests with the skipped status",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "success": {
                                "description": "The number of tests with the success status",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              },
                              "total": {
                                "description": "The total number of tests",
                                "format": "int64",
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "required": [
                              "error",
                              "failure",
                              "skipped",
                              "success",
                              "total"
                            ],
                            "type": "object"
                          },
                          "workflow_id": {
                            "description": "The ID of the workflow associated with the provided test counts"
                          }
                        },
                        "required": [
                          "pipeline_number",
                          "workflow_id",
                          "success_rate",
                          "test_counts"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "total_test_runs": {
                      "description": "The total number of test runs",
                      "format": "int64",
                      "minimum": 0,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "average_test_count",
                    "most_failed_tests",
                    "most_failed_tests_extra",
                    "slowest_tests",
                    "slowest_tests_extra",
                    "total_test_runs",
                    "test_runs"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "A list of test metrics by workflow"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get test metrics for a project's workflows",
        "tags": ["Insights"]
      }
    },
    "/me": {
      "get": {
        "description": "Provides information about the user that is currently signed in.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "The unique ID of the user.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "login": {
                      "description": "The login information for the user on the VCS.",
                      "title": "Login",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the user.",
                      "type": "string"
                    }
                  },
                  "required": ["id", "login", "name"],
                  "title": "User",
                  "type": "object"
                }
              }
            },
            "description": "User login information."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "User Information",
        "tags": ["User"]
      }
    },
    "/me/collaborations": {
      "get": {
        "description": "Provides the set of organizations of which a user is a member or a collaborator.\n\nThe set of organizations that a user can collaborate on is composed of:\n\n* Organizations that the current user belongs to across VCS types (e.g. BitBucket, GitHub)\n* The parent organization of repository that the user can collaborate on, but is not necessarily a member of\n* The organization of the current user's account",
        "operationId": "getCollaborations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "avatar_url": {
                        "description": "URL to the user's avatar on the VCS",
                        "type": "string"
                      },
                      "id": {
                        "description": "The UUID of the organization",
                        "format": "uuid",
                        "type": "string",
                        "x-nullable": true
                      },
                      "name": {
                        "description": "The name of the organization",
                        "type": "string"
                      },
                      "slug": {
                        "description": "The slug of the organization",
                        "type": "string"
                      },
                      "vcs-type": {
                        "description": "The VCS provider",
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "vcs-type",
                      "name",
                      "avatar_url",
                      "slug"
                    ],
                    "title": "Collaboration",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Collaborations"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Collaborations",
        "tags": ["User"]
      }
    },
    "/org/{orgID}/oidc-custom-claims": {
      "delete": {
        "description": "Deletes org-level custom claims of OIDC identity tokens",
        "operationId": "DeleteOrgClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          },
          {
            "$ref": "#/components/parameters/Claims"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete org-level claims",
        "tags": ["OIDC Token Management"]
      },
      "get": {
        "description": "Fetches org-level custom claims of OIDC identity tokens",
        "operationId": "GetOrgClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully fetched."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get org-level claims",
        "tags": ["OIDC Token Management"]
      },
      "patch": {
        "description": "Creates/Updates org-level custom claims of OIDC identity tokens",
        "operationId": "PatchOrgClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClaimsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully patched."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Patch org-level claims",
        "tags": ["OIDC Token Management"]
      }
    },
    "/org/{orgID}/project/{projectID}/oidc-custom-claims": {
      "delete": {
        "description": "Deletes project-level custom claims of OIDC identity tokens",
        "operationId": "DeleteProjectClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          },
          {
            "$ref": "#/components/parameters/ProjectID"
          },
          {
            "$ref": "#/components/parameters/Claims"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully deleted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete project-level claims",
        "tags": ["OIDC Token Management"]
      },
      "get": {
        "description": "Fetches project-level custom claims of OIDC identity tokens",
        "operationId": "GetProjectClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          },
          {
            "$ref": "#/components/parameters/ProjectID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully fetched."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get project-level claims",
        "tags": ["OIDC Token Management"]
      },
      "patch": {
        "description": "Creates/Updates project-level custom claims of OIDC identity tokens",
        "operationId": "PatchProjectClaims",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrgID"
          },
          {
            "$ref": "#/components/parameters/ProjectID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClaimsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimResponse"
                }
              }
            },
            "description": "Claims successfully patched."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Patch project-level claims",
        "tags": ["OIDC Token Management"]
      }
    },
    "/organizations/{org_id}/usage_export_job": {
      "parameters": [
        {
          "$ref": "#/components/parameters/org_id"
        }
      ],
      "post": {
        "description": "Submits a request to create a usage export for an organization.",
        "operationId": "createUsageExport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": false,
                "properties": {
                  "end": {
                    "description": "The end date & time (inclusive) of the range from which data will be pulled. Must be no more than 31 days after `start`.",
                    "format": "date-time",
                    "type": "string"
                  },
                  "shared_org_ids": {
                    "items": {
                      "description": "Additional shared org IDs to to include data for in the generated usage export.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "start": {
                    "description": "The start date & time (inclusive) of the range from which data will be pulled. Must be no more than one year ago.",
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "required": ["start", "end"],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usage_export_job"
                }
              }
            },
            "description": "Usage export created successfully"
          },
          "400": {
            "$ref": "#/components/responses/400_unexpected_request_body"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "404": {
            "$ref": "#/components/responses/404_entity_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "Create a usage export",
        "tags": ["Usage"]
      }
    },
    "/organizations/{org_id}/usage_export_job/{usage_export_job_id}": {
      "get": {
        "description": "Gets a usage export for an organization.",
        "operationId": "getUsageExport",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_usage_export_job_status"
                }
              }
            },
            "description": "Usage export fetched successfully"
          },
          "400": {
            "$ref": "#/components/responses/400_unexpected_request_body"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "404": {
            "$ref": "#/components/responses/404_entity_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "Get a usage export",
        "tags": ["Usage"]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/org_id"
        },
        {
          "$ref": "#/components/parameters/usage_export_job_id"
        }
      ]
    },
    "/owner/{ownerID}/context/{context}/decision": {
      "get": {
        "description": "This endpoint will return a list of decision audit logs that were made using this owner's policies.",
        "operationId": "GetDecisionLogs",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "description": "Return decisions matching this decision status.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return decisions made after this date.",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return decisions made before this date.",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return decisions made on this branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return decisions made for this project.",
            "in": "query",
            "name": "project_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return decisions made for this build number.",
            "in": "query",
            "name": "build_number",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sets the offset when retrieving the decisions, for paging.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DecisionLog"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Decision logs successfully retrieved."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Retrieves the owner's decision audit logs.",
        "tags": ["Policy Management"]
      },
      "post": {
        "description": "This endpoint will evaluate input data (config+metadata) against owner's stored policies and return a decision.",
        "operationId": "MakeDecision",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "input": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object"
                  }
                },
                "required": ["input"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Decision"
                }
              }
            },
            "description": "Decision rendered by applying the policy against the provided data. Response will be modeled by the data and rego processed."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "context: must be a valid value.",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "The request is malformed\n"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "Unauthorized.",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "The request is unauthorized\n"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "There was an error processing your request.",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "Something unexpected happened on the server."
          }
        },
        "summary": "Makes a decision",
        "tags": ["Policy Management"]
      }
    },
    "/owner/{ownerID}/context/{context}/decision/settings": {
      "get": {
        "description": "This endpoint retrieves the current decision settings (eg enable/disable policy evaluation)",
        "operationId": "GetDecisionSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionSettings"
                }
              }
            },
            "description": "Decision settings successfully retrieved."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Get the decision settings",
        "tags": ["Policy Management"]
      },
      "patch": {
        "description": "This endpoint allows modifying decision settings (eg enable/disable policy evaluation)",
        "operationId": "SetDecisionSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecisionSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionSettings"
                }
              }
            },
            "description": "Decision settings successfully set."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Set the decision settings",
        "tags": ["Policy Management"]
      }
    },
    "/owner/{ownerID}/context/{context}/decision/{decisionID}": {
      "get": {
        "description": "This endpoint will retrieve a decision for a given decision log ID",
        "operationId": "GetDecisionLog",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/DecisionID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionLog"
                }
              }
            },
            "description": "Decision log successfully retrieved."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "decision log not found",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "There was no decision log found for given decision_id, and owner_id.\n"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Retrieves the owner's decision audit log by given decisionID",
        "tags": ["Policy Management"]
      }
    },
    "/owner/{ownerID}/context/{context}/decision/{decisionID}/policy-bundle": {
      "get": {
        "description": "This endpoint will retrieve a policy bundle for a given decision log ID",
        "operationId": "GetDecisionLogPolicyBundle",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "$ref": "#/components/parameters/DecisionID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyBundle"
                }
              }
            },
            "description": "Policy-Bundle retrieved successfully for given decision log ID"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "decision log not found",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "There was no decision log found for given decision_id, and owner_id.\n"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Retrieves Policy Bundle for a given decision log ID",
        "tags": ["Policy Management"]
      }
    },
    "/owner/{ownerID}/context/{context}/policy-bundle": {
      "get": {
        "description": "This endpoint will retrieve a policy bundle",
        "operationId": "GetPolicyBundle",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyBundle"
                }
              }
            },
            "description": "Policy-Bundle retrieved successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Retrieves Policy Bundle",
        "tags": ["Policy Management"]
      },
      "post": {
        "description": "This endpoint replaces the current policy bundle with the provided policy bundle",
        "operationId": "CreatePolicyBundle",
        "parameters": [
          {
            "$ref": "#/components/parameters/OwnerID"
          },
          {
            "$ref": "#/components/parameters/Context"
          },
          {
            "in": "query",
            "name": "dry",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundlePayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleDiff"
                }
              }
            },
            "description": "Policy-Bundle diff successfully returned."
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BundleDiff"
                }
              }
            },
            "description": "Policy-Bundle successfully created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "http: request payload too large",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "The request exceeds the maximum payload size for policy bundles ~2.5Mib\n"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Creates policy bundle for the context",
        "tags": ["Policy Management"]
      }
    },
    "/owner/{ownerID}/context/{context}/policy-bundle/{policyName}": {
      "get": {
        "description": "This endpoint will retrieve a policy document.",
        "operationId": "GetPolicyDocument",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            },
            "description": "Policy retrieved successfully."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "example": "policy not found",
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "type": "object"
                }
              }
            },
            "description": "There was no policy that was found with the given owner_id and policy name.\n"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedServerError"
          }
        },
        "summary": "Retrieves a policy document",
        "tags": ["Policy Management"]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/OwnerID"
        },
        {
          "$ref": "#/components/parameters/Context"
        },
        {
          "description": "the policy name set by the rego policy_name rule",
          "in": "path",
          "name": "policyName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/pipeline": {
      "get": {
        "description": "Returns all pipelines for the most recently built projects (max 250) you follow in an organization.",
        "operationId": "listPipelines",
        "parameters": [
          {
            "description": "Org slug in the form `vcs-slug/org-name`. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug` and replace the `org-name` with the organization ID (found in Organization Settings).",
            "example": "gh/CircleCI-Public",
            "in": "query",
            "name": "org-slug",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include entries created by your user.",
            "in": "query",
            "name": "mine",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of pipelines",
                  "properties": {
                    "items": {
                      "items": {
                        "description": "A pipeline response.",
                        "properties": {
                          "created_at": {
                            "description": "The date and time the pipeline was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "errors": {
                            "description": "A sequence of errors that have occurred within the pipeline.",
                            "items": {
                              "description": "An error with a type and message.",
                              "properties": {
                                "message": {
                                  "description": "A human-readable error message.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of error.",
                                  "enum": [
                                    "config",
                                    "config-fetch",
                                    "timeout",
                                    "permission",
                                    "other",
                                    "trigger-rule",
                                    "plan"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": ["type", "message"],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique ID of the pipeline.",
                            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                            "format": "uuid",
                            "type": "string"
                          },
                          "number": {
                            "description": "The number of the pipeline.",
                            "example": "25",
                            "format": "int64",
                            "type": "integer"
                          },
                          "project_slug": {
                            "description": "The project-slug for the pipeline.",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "state": {
                            "description": "The current state of the pipeline.",
                            "enum": [
                              "created",
                              "errored",
                              "setup-pending",
                              "setup",
                              "pending"
                            ],
                            "type": "string"
                          },
                          "trigger": {
                            "description": "A summary of the trigger.",
                            "properties": {
                              "actor": {
                                "description": "The user who triggered the Pipeline.",
                                "properties": {
                                  "avatar_url": {
                                    "description": "URL to the user's avatar on the VCS",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "login": {
                                    "description": "The login information for the user on the VCS.",
                                    "title": "Login",
                                    "type": "string"
                                  }
                                },
                                "required": ["login", "avatar_url"],
                                "type": "object"
                              },
                              "received_at": {
                                "description": "The date and time the trigger was received.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of trigger.",
                                "enum": [
                                  "scheduled_pipeline",
                                  "explicit",
                                  "api",
                                  "webhook"
                                ],
                                "type": "string"
                              }
                            },
                            "required": ["type", "received_at", "actor"],
                            "type": "object"
                          },
                          "trigger_parameters": {
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "format": "int64",
                                  "type": "integer"
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "object"
                          },
                          "updated_at": {
                            "description": "The date and time the pipeline was last updated.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "vcs": {
                            "description": "VCS information for the pipeline.",
                            "properties": {
                              "branch": {
                                "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                                "example": "feature/design-new-api",
                                "type": "string"
                              },
                              "commit": {
                                "description": "The latest commit in the pipeline.",
                                "properties": {
                                  "body": {
                                    "description": "The body of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "subject": {
                                    "description": "The subject of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  }
                                },
                                "required": ["subject", "body"],
                                "type": "object"
                              },
                              "origin_repository_url": {
                                "description": "URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              },
                              "provider_name": {
                                "description": "Name of the VCS provider (e.g. GitHub, Bitbucket).",
                                "example": "GitHub",
                                "type": "string"
                              },
                              "review_id": {
                                "description": "The code review id.",
                                "example": "123",
                                "type": "string"
                              },
                              "review_url": {
                                "description": "The code review URL.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs/pull/123",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The code revision the pipeline ran.",
                                "example": "f454a02b5d10fcccfd7d9dd7608a76d6493a98b4",
                                "type": "string"
                              },
                              "tag": {
                                "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                                "example": "v3.1.4159",
                                "type": "string"
                              },
                              "target_repository_url": {
                                "description": "URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              }
                            },
                            "required": [
                              "provider_name",
                              "origin_repository_url",
                              "target_repository_url",
                              "revision"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "number",
                          "project_slug",
                          "created_at",
                          "errors",
                          "state",
                          "trigger"
                        ],
                        "title": "Pipeline",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "PipelineListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A sequence of pipelines.",
            "links": {
              "NextPipelinePage": {
                "operationId": "listPipelines",
                "parameters": {
                  "page-token": "$response.body#/next_page_token"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a list of pipelines",
        "tags": ["Pipeline"]
      }
    },
    "/pipeline/continue": {
      "post": {
        "description": "Continue a pipeline from the setup phase. For information on using pipeline parameters with dynamic configuration, see the [Pipeline values and parameters](https://circleci.com/docs/pipeline-variables/#pipeline-parameters-and-dynamic-configuration) docs.",
        "operationId": "continuePipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "configuration": {
                    "description": "A configuration string for the pipeline.",
                    "type": "string"
                  },
                  "continuation-key": {
                    "description": "A pipeline continuation key.",
                    "title": "PipelineContinuationKey",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "description": "An object containing pipeline parameters and their values. Pipeline parameters have the following size limits: 100 max entries, 128 maximum key length, 512 maximum value length.",
                    "example": {
                      "deploy_prod": true
                    },
                    "type": "object"
                  }
                },
                "required": ["continuation-key", "configuration"],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Continue a pipeline",
        "tags": ["Pipeline"]
      }
    },
    "/pipeline/{pipeline-id}": {
      "get": {
        "description": "Returns a pipeline by the pipeline ID.",
        "operationId": "getPipelineById",
        "parameters": [
          {
            "description": "The unique ID of the pipeline.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "pipeline-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A pipeline response.",
                  "properties": {
                    "created_at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "errors": {
                      "description": "A sequence of errors that have occurred within the pipeline.",
                      "items": {
                        "description": "An error with a type and message.",
                        "properties": {
                          "message": {
                            "description": "A human-readable error message.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of error.",
                            "enum": [
                              "config",
                              "config-fetch",
                              "timeout",
                              "permission",
                              "other",
                              "trigger-rule",
                              "plan"
                            ],
                            "type": "string"
                          }
                        },
                        "required": ["type", "message"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "The unique ID of the pipeline.",
                      "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                      "format": "uuid",
                      "type": "string"
                    },
                    "number": {
                      "description": "The number of the pipeline.",
                      "example": "25",
                      "format": "int64",
                      "type": "integer"
                    },
                    "project_slug": {
                      "description": "The project-slug for the pipeline.",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "state": {
                      "description": "The current state of the pipeline.",
                      "enum": [
                        "created",
                        "errored",
                        "setup-pending",
                        "setup",
                        "pending"
                      ],
                      "type": "string"
                    },
                    "trigger": {
                      "description": "A summary of the trigger.",
                      "properties": {
                        "actor": {
                          "description": "The user who triggered the Pipeline.",
                          "properties": {
                            "avatar_url": {
                              "description": "URL to the user's avatar on the VCS",
                              "type": "string",
                              "x-nullable": true
                            },
                            "login": {
                              "description": "The login information for the user on the VCS.",
                              "title": "Login",
                              "type": "string"
                            }
                          },
                          "required": ["login", "avatar_url"],
                          "type": "object"
                        },
                        "received_at": {
                          "description": "The date and time the trigger was received.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of trigger.",
                          "enum": [
                            "scheduled_pipeline",
                            "explicit",
                            "api",
                            "webhook"
                          ],
                          "type": "string"
                        }
                      },
                      "required": ["type", "received_at", "actor"],
                      "type": "object"
                    },
                    "trigger_parameters": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "format": "int64",
                            "type": "integer"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "updated_at": {
                      "description": "The date and time the pipeline was last updated.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "vcs": {
                      "description": "VCS information for the pipeline.",
                      "properties": {
                        "branch": {
                          "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                          "example": "feature/design-new-api",
                          "type": "string"
                        },
                        "commit": {
                          "description": "The latest commit in the pipeline.",
                          "properties": {
                            "body": {
                              "description": "The body of the commit message.",
                              "type": "string",
                              "x-nullable": true
                            },
                            "subject": {
                              "description": "The subject of the commit message.",
                              "type": "string",
                              "x-nullable": true
                            }
                          },
                          "required": ["subject", "body"],
                          "type": "object"
                        },
                        "origin_repository_url": {
                          "description": "URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        },
                        "provider_name": {
                          "description": "Name of the VCS provider (e.g. GitHub, Bitbucket).",
                          "example": "GitHub",
                          "type": "string"
                        },
                        "review_id": {
                          "description": "The code review id.",
                          "example": "123",
                          "type": "string"
                        },
                        "review_url": {
                          "description": "The code review URL.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs/pull/123",
                          "type": "string"
                        },
                        "revision": {
                          "description": "The code revision the pipeline ran.",
                          "example": "f454a02b5d10fcccfd7d9dd7608a76d6493a98b4",
                          "type": "string"
                        },
                        "tag": {
                          "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                          "example": "v3.1.4159",
                          "type": "string"
                        },
                        "target_repository_url": {
                          "description": "URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        }
                      },
                      "required": [
                        "provider_name",
                        "origin_repository_url",
                        "target_repository_url",
                        "revision"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "id",
                    "number",
                    "project_slug",
                    "created_at",
                    "errors",
                    "state",
                    "trigger"
                  ],
                  "title": "Pipeline",
                  "type": "object"
                }
              }
            },
            "description": "A pipeline object.",
            "links": {
              "ProjectFromPipeline": {
                "operationId": "getProjectBySlug",
                "parameters": {
                  "project_slug": "$response.body#/project_slug"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a pipeline by ID",
        "tags": ["Pipeline"]
      }
    },
    "/pipeline/{pipeline-id}/config": {
      "get": {
        "description": "Returns a pipeline's configuration by ID.",
        "operationId": "getPipelineConfigById",
        "parameters": [
          {
            "description": "The unique ID of the pipeline.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "pipeline-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "The configuration strings for the pipeline.",
                  "properties": {
                    "compiled": {
                      "description": "The compiled configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's configuration, then this field may be empty.",
                      "type": "string"
                    },
                    "compiled-setup-config": {
                      "description": "The compiled setup configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's setup workflows, then this field may be empty.",
                      "type": "string"
                    },
                    "setup-config": {
                      "description": "The setup configuration for the pipeline used for Setup Workflows. If there were errors processing the pipeline's configuration or if setup workflows are not enabled, then this field should not exist",
                      "type": "string"
                    },
                    "source": {
                      "description": "The source configuration for the pipeline, before any config compilation has been performed. If there is no config, then this field will be empty.",
                      "type": "string"
                    }
                  },
                  "required": ["source", "compiled"],
                  "title": "PipelineConfig",
                  "type": "object"
                }
              }
            },
            "description": "The configuration strings for the pipeline."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a pipeline's configuration",
        "tags": ["Pipeline"]
      }
    },
    "/pipeline/{pipeline-id}/workflow": {
      "get": {
        "description": "Returns a paginated list of workflows by pipeline ID.",
        "operationId": "listWorkflowsByPipelineId",
        "parameters": [
          {
            "description": "The unique ID of the pipeline.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "pipeline-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of workflows and associated pagination token.",
                  "properties": {
                    "items": {
                      "description": "A list of workflows.",
                      "items": {
                        "description": "A workflow",
                        "properties": {
                          "canceled_by": {
                            "format": "uuid",
                            "type": "string"
                          },
                          "created_at": {
                            "description": "The date and time the workflow was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "errored_by": {
                            "format": "uuid",
                            "type": "string"
                          },
                          "id": {
                            "description": "The unique ID of the workflow.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "The name of the workflow.",
                            "example": "build-and-test",
                            "type": "string"
                          },
                          "pipeline_id": {
                            "description": "The ID of the pipeline this workflow belongs to.",
                            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                            "format": "uuid",
                            "type": "string"
                          },
                          "pipeline_number": {
                            "description": "The number of the pipeline this workflow belongs to.",
                            "example": "25",
                            "format": "int64",
                            "type": "integer"
                          },
                          "project_slug": {
                            "description": "The project-slug for the pipeline this workflow belongs to.",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "started_by": {
                            "format": "uuid",
                            "type": "string"
                          },
                          "status": {
                            "description": "The current status of the workflow.",
                            "enum": [
                              "success",
                              "running",
                              "not_run",
                              "failed",
                              "error",
                              "failing",
                              "on_hold",
                              "canceled",
                              "unauthorized"
                            ],
                            "type": "string"
                          },
                          "stopped_at": {
                            "description": "The date and time the workflow stopped.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": true
                          },
                          "tag": {
                            "description": "Tag used for the workflow",
                            "enum": ["setup"],
                            "example": "setup",
                            "type": "string",
                            "x-nullable": true
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "status",
                          "created_at",
                          "stopped_at",
                          "pipeline_id",
                          "pipeline_number",
                          "project_slug",
                          "started_by"
                        ],
                        "title": "Workflow",
                        "type": "object"
                      },
                      "title": "Workflow list",
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "WorkflowListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of workflow objects.",
            "links": {
              "NextPipelineWorkflowsPage": {
                "operationId": "listWorkflowsByPipelineId",
                "parameters": {
                  "page-token": "$response.body#/next_page_token",
                  "pipeline-id": "$request.path.pipeline-id"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a pipeline's workflows",
        "tags": ["Pipeline"]
      }
    },
    "/project/{project-slug}": {
      "get": {
        "description": "Retrieves a project by project slug.",
        "operationId": "getProjectBySlug",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "NOTE: The definition of Project is subject to change.",
                  "properties": {
                    "id": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the project",
                      "example": "api-preview-docs",
                      "type": "string"
                    },
                    "organization_id": {
                      "description": "The id of the organization the project belongs to",
                      "example": "CircleCI-Public",
                      "format": "uuid",
                      "type": "string"
                    },
                    "organization_name": {
                      "description": "The name of the organization the project belongs to",
                      "example": "CircleCI-Public",
                      "type": "string"
                    },
                    "organization_slug": {
                      "description": "The slug of the organization the project belongs to",
                      "example": "CircleCI-Public",
                      "type": "string"
                    },
                    "slug": {
                      "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "vcs_info": {
                      "description": "Information about the VCS that hosts the project source code.",
                      "properties": {
                        "default_branch": {
                          "example": "main",
                          "type": "string"
                        },
                        "provider": {
                          "description": "The VCS provider",
                          "enum": ["Bitbucket", "CircleCI", "GitHub"],
                          "type": "string"
                        },
                        "vcs_url": {
                          "description": "URL to the repository hosting the project's code",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        }
                      },
                      "required": ["vcs_url", "provider", "default_branch"],
                      "type": "object"
                    }
                  },
                  "required": [
                    "slug",
                    "name",
                    "id",
                    "organization_name",
                    "organization_slug",
                    "organization_id",
                    "vcs_info"
                  ],
                  "title": "Project",
                  "type": "object"
                }
              }
            },
            "description": "A project object"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a project",
        "tags": ["Project"]
      }
    },
    "/project/{project-slug}/checkout-key": {
      "get": {
        "description": "Returns a sequence of checkout keys for `:project`.",
        "operationId": "listCheckoutKeys",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The fingerprint digest type to return. This may be either `md5` or `sha256`. If not passed, defaults to `md5`.",
            "in": "query",
            "name": "digest",
            "required": false,
            "schema": {
              "enum": ["sha256", "md5"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "description": "A checkout key",
                        "properties": {
                          "created-at": {
                            "description": "The date and time the checkout key was created.",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "fingerprint": {
                            "description": "An SSH key fingerprint.",
                            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f",
                            "type": "string"
                          },
                          "preferred": {
                            "description": "A boolean value that indicates if this key is preferred.",
                            "example": true,
                            "type": "boolean"
                          },
                          "public-key": {
                            "description": "A public SSH key.",
                            "example": "ssh-rsa ...",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                            "enum": ["deploy-key", "github-user-key"],
                            "example": "deploy-key",
                            "title": "CheckoutKeyType",
                            "type": "string"
                          }
                        },
                        "required": [
                          "public-key",
                          "type",
                          "fingerprint",
                          "preferred",
                          "created-at"
                        ],
                        "title": "CheckoutKey",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "CheckoutKeyListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A sequence of checkout keys."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get all checkout keys",
        "tags": ["Project"]
      },
      "post": {
        "description": "Not available to projects that use GitLab or GitHub App. Creates a new checkout key. This API request is only usable with a user API token.\n                           Please ensure that you have authorized your account with GitHub before creating user keys.\n                           This is necessary to give CircleCI the permission to create a user key associated with\n                           your GitHub user account. You can find this page by visiting Project Settings > Checkout SSH Keys",
        "operationId": "createCheckoutKey",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": {
                    "description": "The type of checkout key to create. This may be either `deploy-key` or `user-key`.",
                    "enum": ["user-key", "deploy-key"],
                    "example": "deploy-key",
                    "title": "CheckoutKeyInputType",
                    "type": "string"
                  }
                },
                "required": ["type"],
                "title": "CheckoutKeyInput",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A checkout key",
                  "properties": {
                    "created-at": {
                      "description": "The date and time the checkout key was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "fingerprint": {
                      "description": "An SSH key fingerprint.",
                      "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f",
                      "type": "string"
                    },
                    "preferred": {
                      "description": "A boolean value that indicates if this key is preferred.",
                      "example": true,
                      "type": "boolean"
                    },
                    "public-key": {
                      "description": "A public SSH key.",
                      "example": "ssh-rsa ...",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                      "enum": ["deploy-key", "github-user-key"],
                      "example": "deploy-key",
                      "title": "CheckoutKeyType",
                      "type": "string"
                    }
                  },
                  "required": [
                    "public-key",
                    "type",
                    "fingerprint",
                    "preferred",
                    "created-at"
                  ],
                  "title": "CheckoutKey",
                  "type": "object"
                }
              }
            },
            "description": "The checkout key."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Create a new checkout key",
        "tags": ["Project"]
      }
    },
    "/project/{project-slug}/checkout-key/{fingerprint}": {
      "delete": {
        "description": "Deletes the checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.",
        "operationId": "deleteCheckoutKey",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An SSH key fingerprint.",
            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f",
            "in": "path",
            "name": "fingerprint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Delete a checkout key",
        "tags": ["Project"]
      },
      "get": {
        "description": "Returns an individual checkout key via md5 or sha256 fingerprint. sha256 keys should be url-encoded.",
        "operationId": "getCheckoutKey",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "An SSH key fingerprint.",
            "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f",
            "in": "path",
            "name": "fingerprint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A checkout key",
                  "properties": {
                    "created-at": {
                      "description": "The date and time the checkout key was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "fingerprint": {
                      "description": "An SSH key fingerprint.",
                      "example": "c9:0b:1c:4f:d5:65:56:b9:ad:88:f9:81:2b:37:74:2f",
                      "type": "string"
                    },
                    "preferred": {
                      "description": "A boolean value that indicates if this key is preferred.",
                      "example": true,
                      "type": "boolean"
                    },
                    "public-key": {
                      "description": "A public SSH key.",
                      "example": "ssh-rsa ...",
                      "type": "string"
                    },
                    "type": {
                      "description": "The type of checkout key. This may be either `deploy-key` or `github-user-key`.",
                      "enum": ["deploy-key", "github-user-key"],
                      "example": "deploy-key",
                      "title": "CheckoutKeyType",
                      "type": "string"
                    }
                  },
                  "required": [
                    "public-key",
                    "type",
                    "fingerprint",
                    "preferred",
                    "created-at"
                  ],
                  "title": "CheckoutKey",
                  "type": "object"
                }
              }
            },
            "description": "The checkout key."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a checkout key",
        "tags": ["Project"]
      }
    },
    "/project/{project-slug}/envvar": {
      "get": {
        "description": "Returns four 'x' characters, in addition to the last four ASCII characters of the value, consistent with the display of environment variable values on the CircleCI website.",
        "operationId": "listEnvVars",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "description": "An environment variable is a map containing a value and an optional timestamp.",
                        "properties": {
                          "created-at": {
                            "description": "The creation timestamp of the environment variable.",
                            "example": "#joda/inst 2023-04-14T21:20:14+0000",
                            "x-nullable": true
                          },
                          "name": {
                            "description": "The name of the environment variable.",
                            "example": "foo",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value of the environment variable.",
                            "example": "xxxx1234",
                            "type": "string"
                          }
                        },
                        "required": ["name", "value"],
                        "title": "EnvironmentVariable",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "EnvironmentVariableListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A sequence of environment variables."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "List all environment variables",
        "tags": ["Project"]
      },
      "post": {
        "description": "Creates a new environment variable.",
        "operationId": "createEnvVar",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An environment variable request requires a name and a value",
                "properties": {
                  "name": {
                    "description": "The name of the environment variable.",
                    "example": "foo",
                    "type": "string"
                  },
                  "value": {
                    "description": "The value of the environment variable.",
                    "example": "xxxx1234",
                    "type": "string"
                  }
                },
                "required": ["name", "value"],
                "title": "EnvironmentVariable",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "An environment variable is a map containing a value and an optional timestamp.",
                  "properties": {
                    "created-at": {
                      "description": "The creation timestamp of the environment variable.",
                      "example": "#joda/inst 2023-04-14T21:20:14+0000",
                      "x-nullable": true
                    },
                    "name": {
                      "description": "The name of the environment variable.",
                      "example": "foo",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of the environment variable.",
                      "example": "xxxx1234",
                      "type": "string"
                    }
                  },
                  "required": ["name", "value"],
                  "title": "EnvironmentVariable",
                  "type": "object"
                }
              }
            },
            "description": "The environment variable."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Create an environment variable",
        "tags": ["Project"]
      }
    },
    "/project/{project-slug}/envvar/{name}": {
      "delete": {
        "description": "Deletes the environment variable named :name.",
        "operationId": "deleteEnvVar",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the environment variable.",
            "example": "foo",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Delete an environment variable",
        "tags": ["Project"]
      },
      "get": {
        "description": "Returns the masked value of environment variable :name.",
        "operationId": "getEnvVar",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the environment variable.",
            "example": "foo",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "An environment variable is a map containing a value and an optional timestamp.",
                  "properties": {
                    "created-at": {
                      "description": "The creation timestamp of the environment variable.",
                      "example": "#joda/inst 2023-04-14T21:20:14+0000",
                      "x-nullable": true
                    },
                    "name": {
                      "description": "The name of the environment variable.",
                      "example": "foo",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value of the environment variable.",
                      "example": "xxxx1234",
                      "type": "string"
                    }
                  },
                  "required": ["name", "value"],
                  "title": "EnvironmentVariable",
                  "type": "object"
                }
              }
            },
            "description": "The environment variable."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a masked environment variable",
        "tags": ["Project"]
      }
    },
    "/project/{project-slug}/job/{job-number}": {
      "get": {
        "description": "Returns job details.",
        "operationId": "getJobDetails",
        "parameters": [
          {
            "description": "The number of the job.",
            "example": "123",
            "in": "path",
            "name": "job-number",
            "required": true,
            "schema": {}
          },
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Job Details",
                  "properties": {
                    "contexts": {
                      "description": "List of contexts used by the job.",
                      "items": {
                        "description": "Information about the context.",
                        "properties": {
                          "name": {
                            "description": "The name of the context.",
                            "type": "string"
                          }
                        },
                        "required": ["name"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "created_at": {
                      "description": "The time when the job was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "duration": {
                      "description": "Duration of a job in milliseconds.",
                      "format": "int64",
                      "type": "integer",
                      "x-nullable": true
                    },
                    "executor": {
                      "description": "Information about executor used for a job.",
                      "properties": {
                        "resource_class": {
                          "description": "Resource class name.",
                          "type": "string"
                        },
                        "type": {
                          "description": "Executor type.",
                          "type": "string"
                        }
                      },
                      "required": ["resource_class"],
                      "type": "object"
                    },
                    "latest_workflow": {
                      "description": "Info about the latest workflow the job was a part of.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the workflow.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the workflow.",
                          "example": "build-and-test",
                          "type": "string"
                        }
                      },
                      "required": ["id", "name"],
                      "type": "object"
                    },
                    "messages": {
                      "description": "Messages from CircleCI execution platform.",
                      "items": {
                        "description": "Message from CircleCI execution platform.",
                        "properties": {
                          "message": {
                            "description": "Information describing message.",
                            "type": "string"
                          },
                          "reason": {
                            "description": "Value describing the reason for message to be added to the job.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Message type.",
                            "type": "string"
                          }
                        },
                        "required": ["type", "message"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "name": {
                      "description": "The name of the job.",
                      "type": "string"
                    },
                    "number": {
                      "description": "The number of the job.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "organization": {
                      "description": "Information about an organization.",
                      "properties": {
                        "name": {
                          "description": "The name of the organization.",
                          "type": "string"
                        }
                      },
                      "required": ["name"],
                      "type": "object"
                    },
                    "parallel_runs": {
                      "description": "Info about parallels runs and their status.",
                      "items": {
                        "description": "Info about a status of the parallel run.",
                        "properties": {
                          "index": {
                            "description": "Index of the parallel run.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "status": {
                            "description": "Status of the parallel run.",
                            "type": "string"
                          }
                        },
                        "required": ["index", "status"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "parallelism": {
                      "description": "A number of parallel runs the job has.",
                      "format": "int64",
                      "type": "integer"
                    },
                    "pipeline": {
                      "description": "Info about a pipeline the job is a part of.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the pipeline.",
                          "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                          "format": "uuid",
                          "type": "string"
                        }
                      },
                      "required": ["id"],
                      "type": "object"
                    },
                    "project": {
                      "description": "Information about a project.",
                      "properties": {
                        "external_url": {
                          "description": "URL to the repository hosting the project's code",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        },
                        "id": {
                          "format": "uuid",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the project",
                          "example": "api-preview-docs",
                          "type": "string"
                        },
                        "slug": {
                          "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
                          "example": "gh/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        }
                      },
                      "required": ["id", "slug", "name", "external_url"],
                      "type": "object"
                    },
                    "queued_at": {
                      "description": "The time when the job was placed in a queue.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "started_at": {
                      "description": "The date and time the job started.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "status": {
                      "description": "The current status of the job.",
                      "enum": [
                        "success",
                        "running",
                        "not_run",
                        "failed",
                        "retried",
                        "queued",
                        "not_running",
                        "infrastructure_fail",
                        "timedout",
                        "on_hold",
                        "terminated-unknown",
                        "blocked",
                        "canceled",
                        "unauthorized"
                      ],
                      "type": "string"
                    },
                    "stopped_at": {
                      "description": "The time when the job stopped.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": true
                    },
                    "web_url": {
                      "description": "URL of the job in CircleCI Web UI.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "number",
                    "name",
                    "status",
                    "started_at",
                    "created_at",
                    "queued_at",
                    "duration",
                    "executor",
                    "project",
                    "organization",
                    "contexts",
                    "web_url",
                    "parallel_runs",
                    "latest_workflow",
                    "pipeline",
                    "parallelism",
                    "messages"
                  ],
                  "title": "Job Details",
                  "type": "object"
                }
              }
            },
            "description": "Job details."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get job details",
        "tags": ["Job"]
      }
    },
    "/project/{project-slug}/job/{job-number}/cancel": {
      "post": {
        "description": "Cancel job with a given job number.",
        "operationId": "cancelJob",
        "parameters": [
          {
            "description": "The number of the job.",
            "example": "123",
            "in": "path",
            "name": "job-number",
            "required": true,
            "schema": {}
          },
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": ""
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Cancel job",
        "tags": ["Job"]
      }
    },
    "/project/{project-slug}/pipeline": {
      "get": {
        "description": "Returns all pipelines for this project.",
        "operationId": "listPipelinesForProject",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "The name of a vcs branch.",
            "in": "query",
            "name": "branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of pipelines",
                  "properties": {
                    "items": {
                      "items": {
                        "description": "A pipeline response.",
                        "properties": {
                          "created_at": {
                            "description": "The date and time the pipeline was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "errors": {
                            "description": "A sequence of errors that have occurred within the pipeline.",
                            "items": {
                              "description": "An error with a type and message.",
                              "properties": {
                                "message": {
                                  "description": "A human-readable error message.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of error.",
                                  "enum": [
                                    "config",
                                    "config-fetch",
                                    "timeout",
                                    "permission",
                                    "other",
                                    "trigger-rule",
                                    "plan"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": ["type", "message"],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique ID of the pipeline.",
                            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                            "format": "uuid",
                            "type": "string"
                          },
                          "number": {
                            "description": "The number of the pipeline.",
                            "example": "25",
                            "format": "int64",
                            "type": "integer"
                          },
                          "project_slug": {
                            "description": "The project-slug for the pipeline.",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "state": {
                            "description": "The current state of the pipeline.",
                            "enum": [
                              "created",
                              "errored",
                              "setup-pending",
                              "setup",
                              "pending"
                            ],
                            "type": "string"
                          },
                          "trigger": {
                            "description": "A summary of the trigger.",
                            "properties": {
                              "actor": {
                                "description": "The user who triggered the Pipeline.",
                                "properties": {
                                  "avatar_url": {
                                    "description": "URL to the user's avatar on the VCS",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "login": {
                                    "description": "The login information for the user on the VCS.",
                                    "title": "Login",
                                    "type": "string"
                                  }
                                },
                                "required": ["login", "avatar_url"],
                                "type": "object"
                              },
                              "received_at": {
                                "description": "The date and time the trigger was received.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of trigger.",
                                "enum": [
                                  "scheduled_pipeline",
                                  "explicit",
                                  "api",
                                  "webhook"
                                ],
                                "type": "string"
                              }
                            },
                            "required": ["type", "received_at", "actor"],
                            "type": "object"
                          },
                          "trigger_parameters": {
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "format": "int64",
                                  "type": "integer"
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "object"
                          },
                          "updated_at": {
                            "description": "The date and time the pipeline was last updated.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "vcs": {
                            "description": "VCS information for the pipeline.",
                            "properties": {
                              "branch": {
                                "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                                "example": "feature/design-new-api",
                                "type": "string"
                              },
                              "commit": {
                                "description": "The latest commit in the pipeline.",
                                "properties": {
                                  "body": {
                                    "description": "The body of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "subject": {
                                    "description": "The subject of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  }
                                },
                                "required": ["subject", "body"],
                                "type": "object"
                              },
                              "origin_repository_url": {
                                "description": "URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              },
                              "provider_name": {
                                "description": "Name of the VCS provider (e.g. GitHub, Bitbucket).",
                                "example": "GitHub",
                                "type": "string"
                              },
                              "review_id": {
                                "description": "The code review id.",
                                "example": "123",
                                "type": "string"
                              },
                              "review_url": {
                                "description": "The code review URL.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs/pull/123",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The code revision the pipeline ran.",
                                "example": "f454a02b5d10fcccfd7d9dd7608a76d6493a98b4",
                                "type": "string"
                              },
                              "tag": {
                                "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                                "example": "v3.1.4159",
                                "type": "string"
                              },
                              "target_repository_url": {
                                "description": "URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              }
                            },
                            "required": [
                              "provider_name",
                              "origin_repository_url",
                              "target_repository_url",
                              "revision"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "number",
                          "project_slug",
                          "created_at",
                          "errors",
                          "state",
                          "trigger"
                        ],
                        "title": "Pipeline",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "PipelineListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A sequence of pipelines.",
            "links": {
              "NextPipelinePage": {
                "operationId": "listPipelinesForProject",
                "parameters": {
                  "page-token": "$response.body#/next_page_token",
                  "project-slug": "$request.path.project-slug"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get all pipelines",
        "tags": ["Pipeline"]
      },
      "post": {
        "description": "Not yet available to projects that use GitLab or GitHub App. Triggers a new pipeline on the project.",
        "operationId": "triggerPipeline",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The information you can supply when triggering a pipeline.",
                "properties": {
                  "branch": {
                    "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                    "example": "feature/design-new-api",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "description": "An object containing pipeline parameters and their values. Pipeline parameters have the following size limits: 100 max entries, 128 maximum key length, 512 maximum value length.",
                    "example": {
                      "deploy_prod": true
                    },
                    "type": "object"
                  },
                  "tag": {
                    "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                    "example": "v3.1.4159",
                    "type": "string"
                  }
                },
                "title": "TriggerPipelineParameters",
                "type": "object",
                "x-nullable": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A pipeline creation response.",
                  "properties": {
                    "created_at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the pipeline.",
                      "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                      "format": "uuid",
                      "type": "string"
                    },
                    "number": {
                      "description": "The number of the pipeline.",
                      "example": "25",
                      "format": "int64",
                      "type": "integer"
                    },
                    "state": {
                      "description": "The current state of the pipeline.",
                      "enum": [
                        "created",
                        "errored",
                        "setup-pending",
                        "setup",
                        "pending"
                      ],
                      "type": "string"
                    }
                  },
                  "required": ["id", "state", "number", "created_at"],
                  "title": "PipelineCreation",
                  "type": "object"
                }
              }
            },
            "description": "The created pipeline."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Trigger a new pipeline",
        "tags": ["Pipeline"]
      }
    },
    "/project/{project-slug}/pipeline/mine": {
      "get": {
        "description": "Returns a sequence of all pipelines for this project triggered by the user.",
        "operationId": "listMyPipelines",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of pipelines",
                  "properties": {
                    "items": {
                      "items": {
                        "description": "A pipeline response.",
                        "properties": {
                          "created_at": {
                            "description": "The date and time the pipeline was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "errors": {
                            "description": "A sequence of errors that have occurred within the pipeline.",
                            "items": {
                              "description": "An error with a type and message.",
                              "properties": {
                                "message": {
                                  "description": "A human-readable error message.",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "The type of error.",
                                  "enum": [
                                    "config",
                                    "config-fetch",
                                    "timeout",
                                    "permission",
                                    "other",
                                    "trigger-rule",
                                    "plan"
                                  ],
                                  "type": "string"
                                }
                              },
                              "required": ["type", "message"],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique ID of the pipeline.",
                            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                            "format": "uuid",
                            "type": "string"
                          },
                          "number": {
                            "description": "The number of the pipeline.",
                            "example": "25",
                            "format": "int64",
                            "type": "integer"
                          },
                          "project_slug": {
                            "description": "The project-slug for the pipeline.",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "state": {
                            "description": "The current state of the pipeline.",
                            "enum": [
                              "created",
                              "errored",
                              "setup-pending",
                              "setup",
                              "pending"
                            ],
                            "type": "string"
                          },
                          "trigger": {
                            "description": "A summary of the trigger.",
                            "properties": {
                              "actor": {
                                "description": "The user who triggered the Pipeline.",
                                "properties": {
                                  "avatar_url": {
                                    "description": "URL to the user's avatar on the VCS",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "login": {
                                    "description": "The login information for the user on the VCS.",
                                    "title": "Login",
                                    "type": "string"
                                  }
                                },
                                "required": ["login", "avatar_url"],
                                "type": "object"
                              },
                              "received_at": {
                                "description": "The date and time the trigger was received.",
                                "format": "date-time",
                                "type": "string"
                              },
                              "type": {
                                "description": "The type of trigger.",
                                "enum": [
                                  "scheduled_pipeline",
                                  "explicit",
                                  "api",
                                  "webhook"
                                ],
                                "type": "string"
                              }
                            },
                            "required": ["type", "received_at", "actor"],
                            "type": "object"
                          },
                          "trigger_parameters": {
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "format": "int64",
                                  "type": "integer"
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "object"
                                }
                              ]
                            },
                            "type": "object"
                          },
                          "updated_at": {
                            "description": "The date and time the pipeline was last updated.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "vcs": {
                            "description": "VCS information for the pipeline.",
                            "properties": {
                              "branch": {
                                "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                                "example": "feature/design-new-api",
                                "type": "string"
                              },
                              "commit": {
                                "description": "The latest commit in the pipeline.",
                                "properties": {
                                  "body": {
                                    "description": "The body of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  },
                                  "subject": {
                                    "description": "The subject of the commit message.",
                                    "type": "string",
                                    "x-nullable": true
                                  }
                                },
                                "required": ["subject", "body"],
                                "type": "object"
                              },
                              "origin_repository_url": {
                                "description": "URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              },
                              "provider_name": {
                                "description": "Name of the VCS provider (e.g. GitHub, Bitbucket).",
                                "example": "GitHub",
                                "type": "string"
                              },
                              "review_id": {
                                "description": "The code review id.",
                                "example": "123",
                                "type": "string"
                              },
                              "review_url": {
                                "description": "The code review URL.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs/pull/123",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The code revision the pipeline ran.",
                                "example": "f454a02b5d10fcccfd7d9dd7608a76d6493a98b4",
                                "type": "string"
                              },
                              "tag": {
                                "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                                "example": "v3.1.4159",
                                "type": "string"
                              },
                              "target_repository_url": {
                                "description": "URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.",
                                "example": "https://github.com/CircleCI-Public/api-preview-docs",
                                "type": "string"
                              }
                            },
                            "required": [
                              "provider_name",
                              "origin_repository_url",
                              "target_repository_url",
                              "revision"
                            ],
                            "type": "object"
                          }
                        },
                        "required": [
                          "id",
                          "number",
                          "project_slug",
                          "created_at",
                          "errors",
                          "state",
                          "trigger"
                        ],
                        "title": "Pipeline",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "PipelineListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A sequence of pipelines.",
            "links": {
              "NextPipelinePage": {
                "operationId": "listMyPipelines",
                "parameters": {
                  "page-token": "$response.body#/next_page_token",
                  "project-slug": "$request.path.project-slug"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get your pipelines",
        "tags": ["Pipeline"]
      }
    },
    "/project/{project-slug}/pipeline/{pipeline-number}": {
      "get": {
        "description": "Returns a pipeline by the pipeline number.",
        "operationId": "getPipelineByNumber",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the pipeline.",
            "example": "123",
            "in": "path",
            "name": "pipeline-number",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A pipeline response.",
                  "properties": {
                    "created_at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "errors": {
                      "description": "A sequence of errors that have occurred within the pipeline.",
                      "items": {
                        "description": "An error with a type and message.",
                        "properties": {
                          "message": {
                            "description": "A human-readable error message.",
                            "type": "string"
                          },
                          "type": {
                            "description": "The type of error.",
                            "enum": [
                              "config",
                              "config-fetch",
                              "timeout",
                              "permission",
                              "other",
                              "trigger-rule",
                              "plan"
                            ],
                            "type": "string"
                          }
                        },
                        "required": ["type", "message"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "The unique ID of the pipeline.",
                      "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                      "format": "uuid",
                      "type": "string"
                    },
                    "number": {
                      "description": "The number of the pipeline.",
                      "example": "25",
                      "format": "int64",
                      "type": "integer"
                    },
                    "project_slug": {
                      "description": "The project-slug for the pipeline.",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "state": {
                      "description": "The current state of the pipeline.",
                      "enum": [
                        "created",
                        "errored",
                        "setup-pending",
                        "setup",
                        "pending"
                      ],
                      "type": "string"
                    },
                    "trigger": {
                      "description": "A summary of the trigger.",
                      "properties": {
                        "actor": {
                          "description": "The user who triggered the Pipeline.",
                          "properties": {
                            "avatar_url": {
                              "description": "URL to the user's avatar on the VCS",
                              "type": "string",
                              "x-nullable": true
                            },
                            "login": {
                              "description": "The login information for the user on the VCS.",
                              "title": "Login",
                              "type": "string"
                            }
                          },
                          "required": ["login", "avatar_url"],
                          "type": "object"
                        },
                        "received_at": {
                          "description": "The date and time the trigger was received.",
                          "format": "date-time",
                          "type": "string"
                        },
                        "type": {
                          "description": "The type of trigger.",
                          "enum": [
                            "scheduled_pipeline",
                            "explicit",
                            "api",
                            "webhook"
                          ],
                          "type": "string"
                        }
                      },
                      "required": ["type", "received_at", "actor"],
                      "type": "object"
                    },
                    "trigger_parameters": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "format": "int64",
                            "type": "integer"
                          },
                          {
                            "type": "boolean"
                          },
                          {
                            "type": "object"
                          }
                        ]
                      },
                      "type": "object"
                    },
                    "updated_at": {
                      "description": "The date and time the pipeline was last updated.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "vcs": {
                      "description": "VCS information for the pipeline.",
                      "properties": {
                        "branch": {
                          "description": "The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).",
                          "example": "feature/design-new-api",
                          "type": "string"
                        },
                        "commit": {
                          "description": "The latest commit in the pipeline.",
                          "properties": {
                            "body": {
                              "description": "The body of the commit message.",
                              "type": "string",
                              "x-nullable": true
                            },
                            "subject": {
                              "description": "The subject of the commit message.",
                              "type": "string",
                              "x-nullable": true
                            }
                          },
                          "required": ["subject", "body"],
                          "type": "object"
                        },
                        "origin_repository_url": {
                          "description": "URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        },
                        "provider_name": {
                          "description": "Name of the VCS provider (e.g. GitHub, Bitbucket).",
                          "example": "GitHub",
                          "type": "string"
                        },
                        "review_id": {
                          "description": "The code review id.",
                          "example": "123",
                          "type": "string"
                        },
                        "review_url": {
                          "description": "The code review URL.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs/pull/123",
                          "type": "string"
                        },
                        "revision": {
                          "description": "The code revision the pipeline ran.",
                          "example": "f454a02b5d10fcccfd7d9dd7608a76d6493a98b4",
                          "type": "string"
                        },
                        "tag": {
                          "description": "The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.",
                          "example": "v3.1.4159",
                          "type": "string"
                        },
                        "target_repository_url": {
                          "description": "URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.",
                          "example": "https://github.com/CircleCI-Public/api-preview-docs",
                          "type": "string"
                        }
                      },
                      "required": [
                        "provider_name",
                        "origin_repository_url",
                        "target_repository_url",
                        "revision"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "id",
                    "number",
                    "project_slug",
                    "created_at",
                    "errors",
                    "state",
                    "trigger"
                  ],
                  "title": "Pipeline",
                  "type": "object"
                }
              }
            },
            "description": "A pipeline object.",
            "links": {
              "ProjectFromPipeline": {
                "operationId": "getProjectBySlug",
                "parameters": {
                  "project_slug": "$response.body#/project_slug"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a pipeline by pipeline number",
        "tags": ["Pipeline"]
      }
    },
    "/project/{project-slug}/schedule": {
      "get": {
        "description": "Returns all schedules for this project.",
        "operationId": "listSchedulesForProject",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "A token to retrieve the next page of results.",
            "in": "query",
            "name": "page-token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A sequence of schedules",
                  "properties": {
                    "items": {
                      "items": {
                        "description": "A schedule response",
                        "properties": {
                          "actor": {
                            "description": "The attribution actor who will run the scheduled pipeline.",
                            "properties": {
                              "id": {
                                "description": "The unique ID of the user.",
                                "format": "uuid",
                                "type": "string"
                              },
                              "login": {
                                "description": "The login information for the user on the VCS.",
                                "title": "Login",
                                "type": "string"
                              },
                              "name": {
                                "description": "The name of the user.",
                                "type": "string"
                              }
                            },
                            "required": ["id", "login", "name"],
                            "title": "User",
                            "type": "object"
                          },
                          "created-at": {
                            "description": "The date and time the pipeline was created.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "description": {
                            "description": "Description of the schedule.",
                            "type": "string",
                            "x-nullable": true
                          },
                          "id": {
                            "description": "The unique ID of the schedule.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the schedule.",
                            "type": "string"
                          },
                          "parameters": {
                            "additionalProperties": {
                              "anyOf": [
                                {
                                  "type": "integer"
                                },
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "boolean"
                                }
                              ]
                            },
                            "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                            "example": {
                              "branch": "feature/design-new-api",
                              "deploy_prod": true
                            },
                            "type": "object"
                          },
                          "project-slug": {
                            "description": "The project-slug for the schedule",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "timetable": {
                            "anyOf": [
                              {
                                "properties": {
                                  "days-of-month": {
                                    "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                                    "items": {
                                      "description": "Day in a month, between 1 and 31.",
                                      "format": "integer",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "days-of-week": {
                                    "description": "Days in a week in which the schedule triggers.",
                                    "items": {
                                      "description": "Day in a week, in three letters format",
                                      "enum": [
                                        "TUE",
                                        "SAT",
                                        "SUN",
                                        "MON",
                                        "THU",
                                        "WED",
                                        "FRI"
                                      ],
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "hours-of-day": {
                                    "description": "Hours in a day in which the schedule triggers.",
                                    "items": {
                                      "description": "Hour in a day in UTC, value must be between 0 and 24",
                                      "format": "integer",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "months": {
                                    "description": "Months in which the schedule triggers.",
                                    "items": {
                                      "description": "Month, in three letters format.",
                                      "enum": [
                                        "MAR",
                                        "NOV",
                                        "DEC",
                                        "JUN",
                                        "MAY",
                                        "OCT",
                                        "FEB",
                                        "APR",
                                        "SEP",
                                        "AUG",
                                        "JAN",
                                        "JUL"
                                      ],
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "per-hour": {
                                    "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                                    "format": "integer",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "per-hour",
                                  "hours-of-day",
                                  "days-of-week"
                                ],
                                "type": "object"
                              },
                              {
                                "properties": {
                                  "days-of-month": {
                                    "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                                    "items": {
                                      "description": "Day in a month, between 1 and 31.",
                                      "format": "integer",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "days-of-week": {
                                    "description": "Days in a week in which the schedule triggers.",
                                    "items": {
                                      "description": "Day in a week, in three letters format",
                                      "enum": [
                                        "TUE",
                                        "SAT",
                                        "SUN",
                                        "MON",
                                        "THU",
                                        "WED",
                                        "FRI"
                                      ],
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "hours-of-day": {
                                    "description": "Hours in a day in which the schedule triggers.",
                                    "items": {
                                      "description": "Hour in a day in UTC, value must be between 0 and 24",
                                      "format": "integer",
                                      "type": "integer"
                                    },
                                    "type": "array"
                                  },
                                  "months": {
                                    "description": "Months in which the schedule triggers.",
                                    "items": {
                                      "description": "Month, in three letters format.",
                                      "enum": [
                                        "MAR",
                                        "NOV",
                                        "DEC",
                                        "JUN",
                                        "MAY",
                                        "OCT",
                                        "FEB",
                                        "APR",
                                        "SEP",
                                        "AUG",
                                        "JAN",
                                        "JUL"
                                      ],
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "per-hour": {
                                    "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                                    "format": "integer",
                                    "type": "integer"
                                  }
                                },
                                "required": [
                                  "per-hour",
                                  "hours-of-day",
                                  "days-of-month"
                                ],
                                "type": "object"
                              }
                            ],
                            "description": "Timetable that specifies when a schedule triggers."
                          },
                          "updated-at": {
                            "description": "The date and time the pipeline was last updated.",
                            "format": "date-time",
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "timetable",
                          "description",
                          "project-slug",
                          "actor",
                          "created-at",
                          "updated-at",
                          "parameters"
                        ],
                        "title": "Schedule",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A sequence of schedules."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get all schedules",
        "tags": ["Schedule"]
      },
      "post": {
        "description": "Not yet available to projects that use GitLab or GitHub App. Creates a schedule and returns the created schedule.",
        "operationId": "createSchedule",
        "parameters": [
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The parameters for a create schedule request",
                "properties": {
                  "attribution-actor": {
                    "description": "The attribution-actor of the scheduled pipeline.",
                    "enum": ["current", "system"],
                    "example": "current",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the schedule.",
                    "type": "string",
                    "x-nullable": true
                  },
                  "name": {
                    "description": "Name of the schedule.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                    "example": {
                      "branch": "feature/design-new-api",
                      "deploy_prod": true
                    },
                    "type": "object"
                  },
                  "timetable": {
                    "anyOf": [
                      {
                        "properties": {
                          "days-of-month": {
                            "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                            "items": {
                              "description": "Day in a month, between 1 and 31.",
                              "format": "integer",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "days-of-week": {
                            "description": "Days in a week in which the schedule triggers.",
                            "items": {
                              "description": "Day in a week, in three letters format",
                              "enum": [
                                "TUE",
                                "SAT",
                                "SUN",
                                "MON",
                                "THU",
                                "WED",
                                "FRI"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "hours-of-day": {
                            "description": "Hours in a day in which the schedule triggers.",
                            "items": {
                              "description": "Hour in a day in UTC, value must be between 0 and 24",
                              "format": "integer",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "months": {
                            "description": "Months in which the schedule triggers.",
                            "items": {
                              "description": "Month, in three letters format.",
                              "enum": [
                                "MAR",
                                "NOV",
                                "DEC",
                                "JUN",
                                "MAY",
                                "OCT",
                                "FEB",
                                "APR",
                                "SEP",
                                "AUG",
                                "JAN",
                                "JUL"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "per-hour": {
                            "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                            "format": "integer",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "per-hour",
                          "hours-of-day",
                          "days-of-week"
                        ],
                        "type": "object"
                      },
                      {
                        "properties": {
                          "days-of-month": {
                            "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                            "items": {
                              "description": "Day in a month, between 1 and 31.",
                              "format": "integer",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "days-of-week": {
                            "description": "Days in a week in which the schedule triggers.",
                            "items": {
                              "description": "Day in a week, in three letters format",
                              "enum": [
                                "TUE",
                                "SAT",
                                "SUN",
                                "MON",
                                "THU",
                                "WED",
                                "FRI"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "hours-of-day": {
                            "description": "Hours in a day in which the schedule triggers.",
                            "items": {
                              "description": "Hour in a day in UTC, value must be between 0 and 24",
                              "format": "integer",
                              "type": "integer"
                            },
                            "type": "array"
                          },
                          "months": {
                            "description": "Months in which the schedule triggers.",
                            "items": {
                              "description": "Month, in three letters format.",
                              "enum": [
                                "MAR",
                                "NOV",
                                "DEC",
                                "JUN",
                                "MAY",
                                "OCT",
                                "FEB",
                                "APR",
                                "SEP",
                                "AUG",
                                "JAN",
                                "JUL"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "per-hour": {
                            "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                            "format": "integer",
                            "type": "integer"
                          }
                        },
                        "required": [
                          "per-hour",
                          "hours-of-day",
                          "days-of-month"
                        ],
                        "type": "object"
                      }
                    ],
                    "description": "Timetable that specifies when a schedule triggers."
                  }
                },
                "required": [
                  "name",
                  "timetable",
                  "attribution-actor",
                  "parameters"
                ],
                "title": "CreateScheduleParameters",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A schedule response",
                  "properties": {
                    "actor": {
                      "description": "The attribution actor who will run the scheduled pipeline.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the user.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "login": {
                          "description": "The login information for the user on the VCS.",
                          "title": "Login",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the user.",
                          "type": "string"
                        }
                      },
                      "required": ["id", "login", "name"],
                      "title": "User",
                      "type": "object"
                    },
                    "created-at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the schedule.",
                      "type": "string",
                      "x-nullable": true
                    },
                    "id": {
                      "description": "The unique ID of the schedule.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the schedule.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                      "example": {
                        "branch": "feature/design-new-api",
                        "deploy_prod": true
                      },
                      "type": "object"
                    },
                    "project-slug": {
                      "description": "The project-slug for the schedule",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "timetable": {
                      "anyOf": [
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-week"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-month"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Timetable that specifies when a schedule triggers."
                    },
                    "updated-at": {
                      "description": "The date and time the pipeline was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "timetable",
                    "description",
                    "project-slug",
                    "actor",
                    "created-at",
                    "updated-at",
                    "parameters"
                  ],
                  "title": "Schedule",
                  "type": "object"
                }
              }
            },
            "description": "A schedule object."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Create a schedule",
        "tags": ["Schedule"]
      }
    },
    "/project/{project-slug}/{job-number}/artifacts": {
      "get": {
        "description": "Returns a job's artifacts.",
        "operationId": "getJobArtifacts",
        "parameters": [
          {
            "description": "The number of the job.",
            "example": "123",
            "in": "path",
            "name": "job-number",
            "required": true,
            "schema": {}
          },
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "description": "An artifact",
                        "properties": {
                          "node_index": {
                            "description": "The index of the node that stored the artifact.",
                            "format": "int64",
                            "minimum": 0,
                            "type": "integer"
                          },
                          "path": {
                            "description": "The artifact path.",
                            "type": "string"
                          },
                          "url": {
                            "description": "The URL to download the artifact contents.",
                            "type": "string"
                          }
                        },
                        "required": ["path", "node_index", "url"],
                        "title": "Artifact",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "ArtifactListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of the job's artifacts."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a job's artifacts",
        "tags": ["Job"]
      }
    },
    "/project/{project-slug}/{job-number}/tests": {
      "get": {
        "description": "Get test metadata for a build. In the rare case where there is more than 250MB of test data on the job, no results will be returned.",
        "operationId": "getTests",
        "parameters": [
          {
            "description": "The number of the job.",
            "example": "123",
            "in": "path",
            "name": "job-number",
            "required": true,
            "schema": {}
          },
          {
            "allowReserved": true,
            "description": "Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).",
            "example": "gh/CircleCI-Public/api-preview-docs",
            "in": "path",
            "name": "project-slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "classname": {
                            "description": "The programmatic location of the test.",
                            "example": "",
                            "type": "string"
                          },
                          "file": {
                            "description": "The file in which the test is defined.",
                            "example": "",
                            "type": "string"
                          },
                          "message": {
                            "description": "The failure message associated with the test.",
                            "example": "",
                            "type": "string",
                            "x-nullable": true
                          },
                          "name": {
                            "description": "The name of the test.",
                            "example": "",
                            "type": "string"
                          },
                          "result": {
                            "description": "Indication of whether the test succeeded.",
                            "example": "",
                            "type": "string"
                          },
                          "run_time": {
                            "description": "The time it took to run the test in seconds",
                            "example": "",
                            "format": "double",
                            "type": "number"
                          },
                          "source": {
                            "description": "The program that generated the test results",
                            "example": "",
                            "type": "string"
                          }
                        },
                        "required": [
                          "message",
                          "source",
                          "run_time",
                          "file",
                          "result",
                          "name",
                          "classname"
                        ],
                        "type": "object"
                      },
                      "title": "TestsResponse",
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "TestsResponse",
                  "type": "object"
                }
              }
            },
            "description": "A paginated list of test results."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get test metadata",
        "tags": ["Job"]
      }
    },
    "/project/{provider}/{organization}/{project}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/provider"
        },
        {
          "$ref": "#/components/parameters/organization"
        },
        {
          "$ref": "#/components/parameters/project"
        }
      ],
      "post": {
        "description": "[__EXPERIMENTAL__]  Creates a new CircleCI project, and returns a list of the default advanced settings. Can only be called on a repo with a main branch and an existing config.yml file. Not yet available to projects that use GitLab or GitHub App.",
        "operationId": "createProject",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project_settings"
                }
              }
            },
            "description": "Successful response."
          },
          "400": {
            "$ref": "#/components/responses/400_unexpected_request_body"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "403": {
            "$ref": "#/components/responses/403_permission_denied"
          },
          "404": {
            "content": {
              "application/json": {
                "examples": {
                  "branch_not_found": {
                    "summary": "Branch not found, unable to trigger pipeline.",
                    "value": {
                      "message": "Branch not found."
                    }
                  },
                  "project_not_found": {
                    "summary": "Project not found, e.g. GitHub repo.",
                    "value": {
                      "message": "Project not found."
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Either a branch or a project were not found."
          },
          "405": {
            "$ref": "#/components/responses/405_cannot_create_standalone_project"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Create a project",
        "tags": ["Project"]
      }
    },
    "/project/{provider}/{organization}/{project}/settings": {
      "get": {
        "description": "[__EXPERIMENTAL__] Returns a list of the advanced settings for a CircleCI project, whether enabled (true) or not (false).",
        "operationId": "getProjectSettings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project_settings"
                }
              }
            },
            "description": "Successful response."
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "403": {
            "$ref": "#/components/responses/403_permission_denied"
          },
          "404": {
            "$ref": "#/components/responses/404_project_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Get project settings",
        "tags": ["Project"]
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/provider"
        },
        {
          "$ref": "#/components/parameters/organization"
        },
        {
          "$ref": "#/components/parameters/project"
        }
      ],
      "patch": {
        "description": "[__EXPERIMENTAL__] Updates one or more of the advanced settings for a CircleCI project.",
        "operationId": "patchProjectSettings",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "advanced": {
                  "autocancel_builds": false,
                  "build_prs_only": true,
                  "pr_only_branch_overrides": ["main"]
                }
              },
              "schema": {
                "$ref": "#/components/schemas/project_settings"
              }
            }
          },
          "description": "The setting(s) to update, including one or more fields in the JSON object. Note that `oss: true` will only be set on projects whose underlying repositories are actually open source.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project_settings"
                }
              }
            },
            "description": "Successful response. Always includes the full advanced settings object. Returned even when the provided updates match the existing settings, but can also be returned when `oss: true` fails to set."
          },
          "400": {
            "content": {
              "application/json": {
                "examples": {
                  "incorrect_type": {
                    "summary": "Incorrect setting type",
                    "value": {
                      "message": "Setting 'autocancel_builds' must be boolean."
                    }
                  },
                  "invalid_json": {
                    "summary": "Invalid JSON body",
                    "value": {
                      "message": "Invalid JSON body."
                    }
                  },
                  "no_json": {
                    "summary": "Empty JSON request body",
                    "value": {
                      "message": "No JSON fields found."
                    }
                  },
                  "oss": {
                    "summary": "Incorrect OSS value for project",
                    "value": {
                      "message": "Feature flag 'oss' is not settable for this project."
                    }
                  },
                  "too_many_branch_overrides": {
                    "summary": "More than 100 branches sent for `pr_only_branch_overrides`",
                    "value": {
                      "message": "Field 'pr_only_branch_overrides' only supports up to 100 branches."
                    }
                  },
                  "unexpected_field": {
                    "summary": "Incorrect root field name",
                    "value": {
                      "message": "Unexpected JSON field 'incorrect'"
                    }
                  },
                  "unknown_setting": {
                    "summary": "Incorrect setting name",
                    "value": {
                      "message": "Unknown advanced setting 'incorrect'."
                    }
                  }
                },
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Request is malformed, e.g. with improperly encoded JSON"
          },
          "401": {
            "$ref": "#/components/responses/401_invalid_token"
          },
          "403": {
            "$ref": "#/components/responses/403_permission_denied"
          },
          "404": {
            "$ref": "#/components/responses/404_project_not_found"
          },
          "429": {
            "$ref": "#/components/responses/429_rate_limit_exceeded"
          },
          "500": {
            "$ref": "#/components/responses/500_internal_server_error"
          }
        },
        "summary": "🧪 Update project settings",
        "tags": ["Project"]
      }
    },
    "/schedule/{schedule-id}": {
      "delete": {
        "description": "Not yet available to projects that use GitLab or GitHub App. Deletes the schedule by id.",
        "operationId": "deleteScheduleById",
        "parameters": [
          {
            "description": "The unique ID of the schedule.",
            "in": "path",
            "name": "schedule-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Delete a schedule",
        "tags": ["Schedule"]
      },
      "get": {
        "description": "Get a schedule by id.",
        "operationId": "getScheduleById",
        "parameters": [
          {
            "description": "The unique ID of the schedule.",
            "in": "path",
            "name": "schedule-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A schedule response",
                  "properties": {
                    "actor": {
                      "description": "The attribution actor who will run the scheduled pipeline.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the user.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "login": {
                          "description": "The login information for the user on the VCS.",
                          "title": "Login",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the user.",
                          "type": "string"
                        }
                      },
                      "required": ["id", "login", "name"],
                      "title": "User",
                      "type": "object"
                    },
                    "created-at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the schedule.",
                      "type": "string",
                      "x-nullable": true
                    },
                    "id": {
                      "description": "The unique ID of the schedule.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the schedule.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                      "example": {
                        "branch": "feature/design-new-api",
                        "deploy_prod": true
                      },
                      "type": "object"
                    },
                    "project-slug": {
                      "description": "The project-slug for the schedule",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "timetable": {
                      "anyOf": [
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-week"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-month"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Timetable that specifies when a schedule triggers."
                    },
                    "updated-at": {
                      "description": "The date and time the pipeline was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "timetable",
                    "description",
                    "project-slug",
                    "actor",
                    "created-at",
                    "updated-at",
                    "parameters"
                  ],
                  "title": "Schedule",
                  "type": "object"
                }
              }
            },
            "description": "A schedule object."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a schedule",
        "tags": ["Schedule"]
      },
      "patch": {
        "description": "Not yet available to projects that use GitLab or GitHub App. Updates a schedule and returns the updated schedule.",
        "operationId": "updateSchedule",
        "parameters": [
          {
            "description": "The unique ID of the schedule.",
            "in": "path",
            "name": "schedule-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The parameters for an update schedule request",
                "properties": {
                  "attribution-actor": {
                    "description": "The attribution-actor of the scheduled pipeline.",
                    "enum": ["current", "system"],
                    "example": "current",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the schedule.",
                    "type": "string",
                    "x-nullable": true
                  },
                  "name": {
                    "description": "Name of the schedule.",
                    "type": "string"
                  },
                  "parameters": {
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "boolean"
                        }
                      ]
                    },
                    "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                    "example": {
                      "branch": "feature/design-new-api",
                      "deploy_prod": true
                    },
                    "type": "object"
                  },
                  "timetable": {
                    "description": "Timetable that specifies when a schedule triggers.",
                    "properties": {
                      "days-of-month": {
                        "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                        "items": {
                          "description": "Day in a month, between 1 and 31.",
                          "format": "integer",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "days-of-week": {
                        "description": "Days in a week in which the schedule triggers.",
                        "items": {
                          "description": "Day in a week, in three letters format",
                          "enum": [
                            "TUE",
                            "SAT",
                            "SUN",
                            "MON",
                            "THU",
                            "WED",
                            "FRI"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "hours-of-day": {
                        "description": "Hours in a day in which the schedule triggers.",
                        "items": {
                          "description": "Hour in a day in UTC, value must be between 0 and 24",
                          "format": "integer",
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "months": {
                        "description": "Months in which the schedule triggers.",
                        "items": {
                          "description": "Month, in three letters format.",
                          "enum": [
                            "MAR",
                            "NOV",
                            "DEC",
                            "JUN",
                            "MAY",
                            "OCT",
                            "FEB",
                            "APR",
                            "SEP",
                            "AUG",
                            "JAN",
                            "JUL"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "per-hour": {
                        "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                        "format": "integer",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "title": "UpdateScheduleParameters",
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A schedule response",
                  "properties": {
                    "actor": {
                      "description": "The attribution actor who will run the scheduled pipeline.",
                      "properties": {
                        "id": {
                          "description": "The unique ID of the user.",
                          "format": "uuid",
                          "type": "string"
                        },
                        "login": {
                          "description": "The login information for the user on the VCS.",
                          "title": "Login",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the user.",
                          "type": "string"
                        }
                      },
                      "required": ["id", "login", "name"],
                      "title": "User",
                      "type": "object"
                    },
                    "created-at": {
                      "description": "The date and time the pipeline was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "description": {
                      "description": "Description of the schedule.",
                      "type": "string",
                      "x-nullable": true
                    },
                    "id": {
                      "description": "The unique ID of the schedule.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the schedule.",
                      "type": "string"
                    },
                    "parameters": {
                      "additionalProperties": {
                        "anyOf": [
                          {
                            "type": "integer"
                          },
                          {
                            "type": "string"
                          },
                          {
                            "type": "boolean"
                          }
                        ]
                      },
                      "description": "Pipeline parameters represented as key-value pairs. Must contain branch or tag.",
                      "example": {
                        "branch": "feature/design-new-api",
                        "deploy_prod": true
                      },
                      "type": "object"
                    },
                    "project-slug": {
                      "description": "The project-slug for the schedule",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "timetable": {
                      "anyOf": [
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-week"
                          ],
                          "type": "object"
                        },
                        {
                          "properties": {
                            "days-of-month": {
                              "description": "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.",
                              "items": {
                                "description": "Day in a month, between 1 and 31.",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "days-of-week": {
                              "description": "Days in a week in which the schedule triggers.",
                              "items": {
                                "description": "Day in a week, in three letters format",
                                "enum": [
                                  "TUE",
                                  "SAT",
                                  "SUN",
                                  "MON",
                                  "THU",
                                  "WED",
                                  "FRI"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "hours-of-day": {
                              "description": "Hours in a day in which the schedule triggers.",
                              "items": {
                                "description": "Hour in a day in UTC, value must be between 0 and 24",
                                "format": "integer",
                                "type": "integer"
                              },
                              "type": "array"
                            },
                            "months": {
                              "description": "Months in which the schedule triggers.",
                              "items": {
                                "description": "Month, in three letters format.",
                                "enum": [
                                  "MAR",
                                  "NOV",
                                  "DEC",
                                  "JUN",
                                  "MAY",
                                  "OCT",
                                  "FEB",
                                  "APR",
                                  "SEP",
                                  "AUG",
                                  "JAN",
                                  "JUL"
                                ],
                                "type": "string"
                              },
                              "type": "array"
                            },
                            "per-hour": {
                              "description": "Number of times a schedule triggers per hour, value must be between 1 and 60",
                              "format": "integer",
                              "type": "integer"
                            }
                          },
                          "required": [
                            "per-hour",
                            "hours-of-day",
                            "days-of-month"
                          ],
                          "type": "object"
                        }
                      ],
                      "description": "Timetable that specifies when a schedule triggers."
                    },
                    "updated-at": {
                      "description": "The date and time the pipeline was last updated.",
                      "format": "date-time",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "timetable",
                    "description",
                    "project-slug",
                    "actor",
                    "created-at",
                    "updated-at",
                    "parameters"
                  ],
                  "title": "Schedule",
                  "type": "object"
                }
              }
            },
            "description": "A schedule object."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Update a schedule",
        "tags": ["Schedule"]
      }
    },
    "/user/{id}": {
      "get": {
        "description": "Provides information about the user with the given ID.",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "The unique ID of the user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "The unique ID of the user.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "login": {
                      "description": "The login information for the user on the VCS.",
                      "title": "Login",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the user.",
                      "type": "string"
                    }
                  },
                  "required": ["id", "login", "name"],
                  "title": "User",
                  "type": "object"
                }
              }
            },
            "description": "User login information."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "User Information",
        "tags": ["User"]
      }
    },
    "/webhook": {
      "get": {
        "description": "Get a list of outbound webhooks that match the given scope-type and scope-id",
        "operationId": "getWebhooks",
        "parameters": [
          {
            "description": "ID of the scope being used (at the moment, only project ID is supported)",
            "in": "query",
            "name": "scope-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Type of the scope being used",
            "in": "query",
            "name": "scope-type",
            "required": true,
            "schema": {
              "enum": ["project"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of webhooks",
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "created-at": {
                            "description": "The date and time the webhook was created.",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "events": {
                            "description": "Events that will trigger the webhook",
                            "items": {
                              "enum": ["workflow-completed", "job-completed"],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique ID of the webhook",
                            "format": "uuid",
                            "type": "string"
                          },
                          "name": {
                            "description": "Name of the webhook",
                            "type": "string"
                          },
                          "scope": {
                            "description": "The scope in which the relevant events that will trigger webhooks",
                            "properties": {
                              "id": {
                                "description": "ID of the scope being used (at the moment, only project ID is supported)",
                                "format": "uuid",
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of the scope being used",
                                "type": "string"
                              }
                            },
                            "required": ["id", "type"],
                            "type": "object"
                          },
                          "signing-secret": {
                            "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                            "type": "string"
                          },
                          "updated-at": {
                            "description": "The date and time the webhook was last updated.",
                            "example": "2015-09-21T17:29:21.042Z",
                            "format": "date-time",
                            "type": "string"
                          },
                          "url": {
                            "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                            "type": "string"
                          },
                          "verify-tls": {
                            "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "scope",
                          "name",
                          "events",
                          "url",
                          "verify-tls",
                          "signing-secret",
                          "created-at",
                          "updated-at"
                        ],
                        "title": "Webhook",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "type": "object"
                }
              }
            },
            "description": "A list of webhooks"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "List webhooks",
        "tags": ["Webhook"]
      },
      "post": {
        "description": "Creates an outbound webhook.",
        "operationId": "createWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The parameters for a create webhook request",
                "properties": {
                  "events": {
                    "description": "Events that will trigger the webhook",
                    "items": {
                      "enum": ["workflow-completed", "job-completed"],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Name of the webhook",
                    "type": "string"
                  },
                  "scope": {
                    "description": "The scope in which the relevant events that will trigger webhooks",
                    "properties": {
                      "id": {
                        "description": "ID of the scope being used (at the moment, only project ID is supported)",
                        "format": "uuid",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of the scope being used",
                        "enum": ["project"],
                        "type": "string"
                      }
                    },
                    "required": ["id", "type"],
                    "type": "object"
                  },
                  "signing-secret": {
                    "description": "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                    "type": "string"
                  },
                  "verify-tls": {
                    "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                    "type": "boolean"
                  }
                },
                "required": [
                  "name",
                  "events",
                  "url",
                  "verify-tls",
                  "signing-secret",
                  "scope"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created-at": {
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "events": {
                      "description": "Events that will trigger the webhook",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "The unique ID of the webhook",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the webhook",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope in which the relevant events that will trigger webhooks",
                      "properties": {
                        "id": {
                          "description": "ID of the scope being used (at the moment, only project ID is supported)",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of the scope being used",
                          "type": "string"
                        }
                      },
                      "required": ["id", "type"],
                      "type": "object"
                    },
                    "signing-secret": {
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                      "type": "string"
                    },
                    "updated-at": {
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                      "type": "string"
                    },
                    "verify-tls": {
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook",
                  "type": "object"
                }
              }
            },
            "description": "A webhook"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Create an outbound webhook",
        "tags": ["Webhook"]
      }
    },
    "/webhook/{webhook-id}": {
      "delete": {
        "description": "Deletes an outbound webhook",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "description": "ID of the webhook (UUID)",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Delete an outbound webhook",
        "tags": ["Webhook"]
      },
      "get": {
        "description": "Get an outbound webhook by id.",
        "operationId": "getWebhookById",
        "parameters": [
          {
            "description": "ID of the webhook (UUID)",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created-at": {
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "events": {
                      "description": "Events that will trigger the webhook",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "The unique ID of the webhook",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the webhook",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope in which the relevant events that will trigger webhooks",
                      "properties": {
                        "id": {
                          "description": "ID of the scope being used (at the moment, only project ID is supported)",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of the scope being used",
                          "type": "string"
                        }
                      },
                      "required": ["id", "type"],
                      "type": "object"
                    },
                    "signing-secret": {
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                      "type": "string"
                    },
                    "updated-at": {
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                      "type": "string"
                    },
                    "verify-tls": {
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook",
                  "type": "object"
                }
              }
            },
            "description": "A webhook"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a webhook",
        "tags": ["Webhook"]
      },
      "put": {
        "description": "Updates an outbound webhook.",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "description": "ID of the webhook (UUID)",
            "in": "path",
            "name": "webhook-id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The parameters for an update webhook request",
                "properties": {
                  "events": {
                    "description": "Events that will trigger the webhook",
                    "items": {
                      "enum": ["workflow-completed", "job-completed"],
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "description": "Name of the webhook",
                    "type": "string"
                  },
                  "signing-secret": {
                    "description": "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                    "type": "string"
                  },
                  "url": {
                    "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                    "type": "string"
                  },
                  "verify-tls": {
                    "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "created-at": {
                      "description": "The date and time the webhook was created.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "events": {
                      "description": "Events that will trigger the webhook",
                      "items": {
                        "enum": ["workflow-completed", "job-completed"],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "id": {
                      "description": "The unique ID of the webhook",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the webhook",
                      "type": "string"
                    },
                    "scope": {
                      "description": "The scope in which the relevant events that will trigger webhooks",
                      "properties": {
                        "id": {
                          "description": "ID of the scope being used (at the moment, only project ID is supported)",
                          "format": "uuid",
                          "type": "string"
                        },
                        "type": {
                          "description": "Type of the scope being used",
                          "type": "string"
                        }
                      },
                      "required": ["id", "type"],
                      "type": "object"
                    },
                    "signing-secret": {
                      "description": "Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request",
                      "type": "string"
                    },
                    "updated-at": {
                      "description": "The date and time the webhook was last updated.",
                      "example": "2015-09-21T17:29:21.042Z",
                      "format": "date-time",
                      "type": "string"
                    },
                    "url": {
                      "description": "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)",
                      "type": "string"
                    },
                    "verify-tls": {
                      "description": "Whether to enforce TLS certificate verification when delivering the webhook",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "scope",
                    "name",
                    "events",
                    "url",
                    "verify-tls",
                    "signing-secret",
                    "created-at",
                    "updated-at"
                  ],
                  "title": "Webhook",
                  "type": "object"
                }
              }
            },
            "description": "A webhook"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Update an outbound webhook",
        "tags": ["Webhook"]
      }
    },
    "/workflow/{id}": {
      "get": {
        "description": "Returns summary fields of a workflow by ID.",
        "operationId": "getWorkflowById",
        "parameters": [
          {
            "description": "The unique ID of the workflow.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A workflow",
                  "properties": {
                    "canceled_by": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "created_at": {
                      "description": "The date and time the workflow was created.",
                      "format": "date-time",
                      "type": "string"
                    },
                    "errored_by": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "id": {
                      "description": "The unique ID of the workflow.",
                      "format": "uuid",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the workflow.",
                      "example": "build-and-test",
                      "type": "string"
                    },
                    "pipeline_id": {
                      "description": "The ID of the pipeline this workflow belongs to.",
                      "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
                      "format": "uuid",
                      "type": "string"
                    },
                    "pipeline_number": {
                      "description": "The number of the pipeline this workflow belongs to.",
                      "example": "25",
                      "format": "int64",
                      "type": "integer"
                    },
                    "project_slug": {
                      "description": "The project-slug for the pipeline this workflow belongs to.",
                      "example": "gh/CircleCI-Public/api-preview-docs",
                      "type": "string"
                    },
                    "started_by": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "status": {
                      "description": "The current status of the workflow.",
                      "enum": [
                        "success",
                        "running",
                        "not_run",
                        "failed",
                        "error",
                        "failing",
                        "on_hold",
                        "canceled",
                        "unauthorized"
                      ],
                      "type": "string"
                    },
                    "stopped_at": {
                      "description": "The date and time the workflow stopped.",
                      "format": "date-time",
                      "type": "string",
                      "x-nullable": true
                    },
                    "tag": {
                      "description": "Tag used for the workflow",
                      "enum": ["setup"],
                      "example": "setup",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "status",
                    "created_at",
                    "stopped_at",
                    "pipeline_id",
                    "pipeline_number",
                    "project_slug",
                    "started_by"
                  ],
                  "title": "Workflow",
                  "type": "object"
                }
              }
            },
            "description": "A workflow object.",
            "links": {
              "CancelWorkflow": {
                "operationId": "cancelWorkflow",
                "parameters": {
                  "id": "$response.body#/id"
                }
              },
              "ProjectFromGetWorkflow": {
                "operationId": "getProjectBySlug",
                "parameters": {
                  "project_slug": "$response.body#/project_slug"
                }
              },
              "WorkflowJobs": {
                "operationId": "listWorkflowJobs",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a workflow",
        "tags": ["Workflow"]
      }
    },
    "/workflow/{id}/approve/{approval_request_id}": {
      "post": {
        "description": "Approves a pending approval job in a workflow.",
        "operationId": "approvePendingApprovalJobById",
        "parameters": [
          {
            "description": "The ID of the job being approved.",
            "in": "path",
            "name": "approval_request_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "The unique ID of the workflow.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Approve a job",
        "tags": ["Workflow"]
      }
    },
    "/workflow/{id}/cancel": {
      "post": {
        "description": "Cancels a running workflow.",
        "operationId": "cancelWorkflow",
        "parameters": [
          {
            "description": "The unique ID of the workflow.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "message response",
                  "properties": {
                    "message": {
                      "description": "A human-readable message",
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "title": "MessageResponse",
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Cancel a workflow",
        "tags": ["Workflow"]
      }
    },
    "/workflow/{id}/job": {
      "get": {
        "description": "Returns a sequence of jobs for a workflow.",
        "operationId": "listWorkflowJobs",
        "parameters": [
          {
            "description": "The unique ID of the workflow.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "description": "Job",
                        "properties": {
                          "approval_request_id": {
                            "description": "The unique ID of the job.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "approved_by": {
                            "description": "The unique ID of the user.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "canceled_by": {
                            "description": "The unique ID of the user.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "dependencies": {
                            "description": "A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.",
                            "items": {
                              "description": "The unique ID of the job.",
                              "format": "uuid",
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "id": {
                            "description": "The unique ID of the job.",
                            "format": "uuid",
                            "type": "string"
                          },
                          "job_number": {
                            "description": "The number of the job.",
                            "format": "int64",
                            "type": "integer"
                          },
                          "name": {
                            "description": "The name of the job.",
                            "type": "string"
                          },
                          "project_slug": {
                            "description": "The project-slug for the job.",
                            "example": "gh/CircleCI-Public/api-preview-docs",
                            "type": "string"
                          },
                          "started_at": {
                            "description": "The date and time the job started.",
                            "format": "date-time",
                            "type": "string"
                          },
                          "status": {
                            "description": "The current status of the job.",
                            "enum": [
                              "success",
                              "running",
                              "not_run",
                              "failed",
                              "retried",
                              "queued",
                              "not_running",
                              "infrastructure_fail",
                              "timedout",
                              "on_hold",
                              "terminated-unknown",
                              "blocked",
                              "canceled",
                              "unauthorized"
                            ],
                            "type": "string"
                          },
                          "stopped_at": {
                            "description": "The time when the job stopped.",
                            "format": "date-time",
                            "type": "string",
                            "x-nullable": true
                          },
                          "type": {
                            "description": "The type of job.",
                            "enum": ["build", "approval"],
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "started_at",
                          "dependencies",
                          "project_slug",
                          "status",
                          "type"
                        ],
                        "title": "Job",
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "next_page_token": {
                      "description": "A token to pass as a `page-token` query parameter to return the next page of results.",
                      "type": "string",
                      "x-nullable": true
                    }
                  },
                  "required": ["items", "next_page_token"],
                  "title": "WorkflowJobListResponse",
                  "type": "object"
                }
              }
            },
            "description": "A paginated sequence of jobs.",
            "links": {
              "NextWorkflowJobPage": {
                "operationId": "listWorkflowJobs",
                "parameters": {
                  "id": "$request.path.id",
                  "page-token": "$response.body#/next_page_token"
                }
              }
            }
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Get a workflow's jobs",
        "tags": ["Workflow"]
      }
    },
    "/workflow/{id}/rerun": {
      "post": {
        "description": "Reruns a workflow.",
        "operationId": "rerunWorkflow",
        "parameters": [
          {
            "description": "The unique ID of the workflow.",
            "example": "5034460f-c7c4-4c43-9457-de07e2029e7b",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "The information you can supply when rerunning a workflow.",
                "properties": {
                  "enable_ssh": {
                    "description": "Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter.",
                    "example": false,
                    "type": "boolean"
                  },
                  "from_failed": {
                    "description": "Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.",
                    "example": false,
                    "type": "boolean"
                  },
                  "jobs": {
                    "description": "A list of job IDs to rerun.",
                    "example": [
                      "c65b68ef-e73b-4bf2-be9a-7a322a9df150",
                      "5e957edd-5e8c-4985-9178-5d0d69561822"
                    ],
                    "items": {
                      "format": "uuid",
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "sparse_tree": {
                    "description": "Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter.",
                    "example": false,
                    "type": "boolean"
                  }
                },
                "title": "RerunWorkflowParameters",
                "type": "object",
                "x-nullable": true
              }
            }
          }
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "A response to rerunning a workflow",
                  "properties": {
                    "workflow_id": {
                      "description": "The ID of the newly-created workflow.",
                      "example": "0e53027b-521a-4c40-9042-47e72b3c63a3",
                      "format": "uuid",
                      "type": "string"
                    }
                  },
                  "required": ["workflow_id"],
                  "type": "object"
                }
              }
            },
            "description": "A confirmation message."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error response."
          }
        },
        "summary": "Rerun a workflow",
        "tags": ["Workflow"]
      }
    }
  },
  "security": [
    {
      "api_key_header": []
    },
    {
      "basic_auth": []
    },
    {
      "api_key_query": []
    }
  ],
  "servers": [
    {
      "url": "https://circleci.com/api/v2"
    }
  ],
  "tags": [
    {
      "name": "Context"
    },
    {
      "name": "Insights"
    },
    {
      "name": "User"
    },
    {
      "name": "Pipeline"
    },
    {
      "name": "Job"
    },
    {
      "name": "Workflow"
    },
    {
      "name": "Webhook"
    },
    {
      "description": "Endpoints related to manage oidc identity tokens",
      "name": "OIDC Token Management"
    },
    {
      "description": "Endpoints related to managing policies and making policy decisions",
      "name": "Policy Management"
    },
    {
      "description": "[__EXPERIMENTAL__] Endpoints related to creating and managing a project.",
      "name": "Project"
    },
    {
      "description": "[__EXPERIMENTAL__] Endpoints related to organization usage exports.\n\nThe Usage API is an API provided by CircleCI to customers to access all of their usage data on CircleCI. It contains all the metadata (org, project, pipeline, workflow, and job dimensions) as well as credit consumption data. It is provided at the near lowest level of granularity (at the job run level).\n\n__Restrictions__\n\n* Max result set size of 100MB\n* Query timeout of 4 hours.\n* Max date window of 32 days\n* No PII is surfaced in the Usage API (e.g. email address, Github login name)\n* The POST endpoint can only be queried up to (i.e. is rate limited to) 10 times per hour per org\n* The GET endpoint can only be queried up to (i.e. is rate limited to) 10 times per minute per org\n* To increase performance the API can generate multiple CSV files that need to be merged after download\n\n__Requirements__\n\n* organization ID - To get your organization ID go to to Organization Settings tab in the CircleCI app. ie https://app.circleci.com/settings/organization/<vcs>/<org name>/overview\n* API Personal Access Token - https://circleci.com/docs/managing-api-tokens/\n\n__Report Fields__\n\n|                                       | Field                         | Description|\n|---------------------------------------|-------------------------------||\n|                                       | organization_id               | The org|\n|                                       | organization_name             | The org name|\n|                                       | organization_created_date     | The date that the org was created|\n| Project-level attributes              | project_id                    | The project ID / token|\n|                                       | project_name                  | The project name. For classic orgs, the project name is inherited from Github. For standalone, the org is set by the user|\n|                                       | project_created_date          | The date that the project was created. For classic orgs, this is the date that the repo was authorized on CircleCI. For standalone orgs, this is the date that the project was created on Circle|\n|                                       | last_build_finished_at        | The date of the last pipeline run on this project|\n| Pipeline-level attributes             | vcs_name                      | The name of the VCS connected to the project on which the pipeline was run|\n|                                       | vcs_url                       | The URL of the VCS on which the pipeline was run|\n|                                       | vcs_branch                    | The branch on which the pipeline was run|\n|                                       | pipeline_id                   | The ID of the pipeline instance that was triggered. If a pipeline is re-run, it will share the same pipeline ID as the original pipeline instance|\n|                                       | pipeline_created_at           | The date the pipeline instance was first triggered|\n|                                       | pipeline_number               | The pipeline number|\n|                                       | is_unregistered_user          | Y/N flag of whether the pipeline was triggered by a CircleCI user or a user not registered on CircleCI. Examples of the latter include users who commit on a connected VCS and consume credits on Circle|\n|                                       | pipeline_trigger_source       | The source of the pipeline instance trigger (API, webhook, etc|\n|                                       | pipeline_trigger_user_id      | The user ID / token of the user who triggered the pipeline|\n| Workflow-level attributes             | workflow_id                   | The ID of the workflow instance that was triggered|\n|                                       | workflow_name                 | The name of the workflow|\n|                                       | workflow_first_job_queued_at  | The timestamp of when the workflow instance started to queue|\n|                                       | workflow_first_job_started_at | The timestamp of when the workflow instance started to run|\n|                                       | workflow_stopped_at           | The timestamp of when the workflow instance stopped                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n|                                       | is_workflow_successful        | Y/N flag of whether all jobs in the workflow were successfully ran                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| Job-level attributes                  | job_name                      | The name of the job (the name the customer sees in the UI)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|                                       | job_id                        | The ID of the job run instance that was triggered|\n|                                       | job_run_number                | The number of the job run instance that was triggered|\n|                                       | job_run_date                  | The date of the job run instance began|\n|                                       | job_build_status              | The status of the job run instance|\n|                                       | resource_class                | The resource class of the job run instance|\n|                                       | operating_system              | The operating system of the job run instance|\n|                                       | executor                      | The executor of the job run instance|\n|                                       | parallelism                   | The parallelism of the job run instance|\n|                                       | job_run_seconds               | The duration in seconds of the job run instance                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n|                                       | median_cpu_utilization_pct    | The median CPU utilization calculated over the course of the entire job run instance. CPU utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|                                       | max_cpu_utilization_pct       | The max CPU utilization logged over the course of the entire job run instance. CPU utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|                                       | median_ram_utilization_pct    | The median RAM utilization calculated over the course of the entire job run instance. RAM utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n|                                       | max_ram_utilization_pct       | The max RAM utilization logged over the course of the entire job run instance. RAM utilization is logged every 15 seconds. It will not be available for any jobs under 15 seconds and occasionally will not be available for jobs greater than 15 seconds.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| Credit consumption metrics            | compute_credits               | The compute credits consumed by this job run instance|\n|                                       | dlc_credits                   | The docker-layer caching credits consumed by this job run instance|\n|                                       | user_credits                  | The user credits consumed by this job run instance|\n|                                       | storage_credits               | The storage credits consumed by this job run instance                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n|                                       | network_credits               | The network credits consumed by this job run instance|\n|                                       | lease_credits                 | The lease credits consumed by this job run instance|\n|                                       | lease_overage_credits         | The lease overage credits consumed by this job run instance|\n|                                       | ipranges_credits              | The IP ranges credits consumed by this job run instance|\n|                                       | total_credits                 | The total credits consumed by this job run instance|\n",
      "name": "Usage"
    }
  ]
}
